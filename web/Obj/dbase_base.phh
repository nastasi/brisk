<?php
  /*
   *  brisk - dbase_base.phh
   *
   *  Copyright (C) 2011-2012 Matteo Nastasi
   *                          mailto: nastasi@alternativeoutput.it
   *                                  matteo.nastasi@milug.org
   *                          web: http://www.alternativeoutput.it
   *
   * This program is free software; you can redistribute it and/or modify
   * it under the terms of the GNU General Public License as published by
   * the Free Software Foundation; either version 2 of the License, or
   * (at your option) any later version.
   *
   * This program is distributed in the hope that it will be useful, but
   * WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABLILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   * General Public License for more details. You should have received a
   * copy of the GNU General Public License along with this program; if
   * not, write to the Free Software Foundation, Inc, 59 Temple Place -
   * Suite 330, Boston, MA 02111-1307, USA.
   *
   */


class LoginDBItem {
    var $code;
    var $login;
    var $pass;
    var $email;
    var $type;
    var $last_dona;
    var $supp_comp;
    var $tos_vers;
    var $disa_reas;
    var $guar_code;
    var $match_cnt;
    var $game_cnt;

    function LoginDBItem($code, $login, $pass, $email, $type, $last_dona, $supp_comp, $tos_vers,
                         $disa_reas, $guar_code, $match_cnt, $game_cnt)
    {
        $this->code      = $code;
        $this->login     = $login;
        $this->pass      = $pass;
        $this->email     = $email;
        $this->type      = $type;
        $this->last_dona = $last_dona;
        $this->supp_comp = $supp_comp;
        $this->tos_vers  = $tos_vers;
        $this->disa_reas = $disa_reas;
        $this->guar_code = $guar_code;
        $this->match_cnt = $match_cnt;
        $this->game_cnt  = $game_cnt;
    }

    static function LoginDBItemFromRecord($rec)
    {
        $ret = new LoginDBItem($rec->code, $rec->login, $rec->pass,
                               $rec->email, $rec->type, $rec->last_dona,
                               $rec->supp_comp, $rec->tos_vers, $rec->disa_reas, $rec->guar_code,
                               $rec->match_cnt, $rec->game_cnt);

        return ($ret);
    }

    function code_get()
    {
        return $this->code;
    }

    function login_get()
    {
        return $this->login;
    }

    function pass_get()
    {
        return $this->pass;
    }

    function email_get()
    {
        return $this->email;
    }

    function type_get()
    {
        return $this->type;
    }

    function last_dona_get()
    {
        return $this->last_dona;
    }

    function supp_comp_get()
    {
        return $this->supp_comp;
    }
    function supp_comp_set($supp_comp)
    {
        $this->supp_comp = $supp_comp;
    }

    function tos_vers_get()
    {
        return $this->tos_vers;
    }
    function tos_vers_set($tos_vers)
    {
        $this->tos_vers = $tos_vers;
    }

    function disa_reas_get()
    {
        return $this->disa_reas;
    }
    function disa_reas_set($disa_reas)
    {
        $this->disa_reas = $disa_reas;
    }
    function guar_code_get()
    {
        return $this->guar_code;
    }

    function match_cnt_get()
    {
        return $this->match_cnt;
    }
    function match_cnt_add($v)
    {
        return $this->match_cnt += $v;
    }

    function game_cnt_get()
    {
        return $this->game_cnt;
    }
    function game_cnt_add($v)
    {
        return $this->game_cnt += $v;
    }
}

define('MAIL_TYP_CHECK', 1);

class MailDBItem {
    var $code;
    var $ucode;
    var $type;
    var $tstamp;
    var $subj;
    var $body_txt;
    var $body_htm;
    var $hash;

    function MailDBItem($code, $ucode, $type, $tstamp, $subj, $body_txt, $body_htm, $hash=NULL)
    {
        $this->code = $code;
        $this->ucode = $ucode;
        $this->type = $type;
        $this->tstamp = $tstamp;
        $this->subj = $subj;
        $this->body_txt = $body_txt;
        $this->body_htm = $body_htm;
        $this->hash = $hash;
    }

    static function MailDBItemFromRecord($rec)
    {
        $ret = new MailDBItem($rec->code, $rec->ucode, $rec->type, $rec->tstamp, $rec->subj,
                              $rec->body_txt, $rec->body_htm, $rec->hash);

        return ($ret);
    }

    function store($bdb)
    {
        return $bdb->mail_add_fromitem($this);
    }
}

define('USERSNET_DEF_FRIEND', 2);
define('USERSNET_DEF_SKILL', 2);
define('USERSNET_DEF_TRUST', 2);

class UsersNetItem {
    var $owner;
    var $target;
    var $friend;
    var $skill;
    var $trust;

    var $from_db;

    function UsersNetItem($owner, $target, $friend, $skill, $trust,
                          $widefriend, $narrowfriend, $from_db)
    {
        $this->owner = $owner;
        $this->target = $target;
        $this->friend = $friend;
        $this->skill = $skill;
        $this->trust = $trust;
        $this->widefriend = $widefriend;
        $this->narrowfriend = $narrowfriend;

        $this->from_db = $from_db;
    }

    static function UsersNetItemFromRecord($rec, $widefriend, $narrowfriend)
    {
        $ret = new UsersNetItem($rec->owner, $rec->target, $rec->friend,
                               $rec->skill, $rec->trust,
                                $widefriend, $narrowfriend, TRUE);

        return ($ret);
    }

    static function UsersNetItemDefaults($owner, $target, $widefriend, $narrowfriend)
    {
        $ret = new UsersNetItem($owner, $target, USERSNET_DEF_FRIEND,
                                USERSNET_DEF_SKILL, USERSNET_DEF_TRUST,
                                $widefriend, $narrowfriend, FALSE);

        return ($ret);
    }


}

?>