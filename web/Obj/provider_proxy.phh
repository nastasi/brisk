<?php
/*
 *  brisk - Obj/provider_proxy.phh
 *
 *  Copyright (C) 2015      Matteo Nastasi
 *                          mailto: nastasi@alternativeoutput.it
 *                                  matteo.nastasi@milug.org
 *                          web: http://www.alternativeoutput.it
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABLILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details. You should have received a
 * copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc, 59 Temple Place -
 * Suite 330, Boston, MA 02111-1307, USA.
 *
 */

require_once("${G_base}Obj/ipclass.phh");

class ProviderProxyItem
{
    var $name;
    var $headitem;
    var $ipclass;

    function ProviderProxyItem($pp_name, $pp_descr)
    {
        $this->name     = $pp_name;
        $this->headitem = $pp_descr['headitem'];
        $this->ipclass  = IPClass::create($pp_descr['ipclass']);
    }
}


class ProviderProxy
{
    var $pp;

    function ProviderProxy()
    {
        $this->pp = NULL;
    }

    static function create($pproxy = NULL)
    {
        $thiz = new ProviderProxy();
        
        if ($pproxy != NULL)
            $thiz->update($pproxy);

        return ($thiz);
    }

    function clean()
    {
        if ($this->pp != NULL) {
            foreach ($this->pp as $pp_key => $pp_value) {
                fprintf(STDERR, "PHP PPN: %s\n", $pp_key);
                unset($this->pp[$pp_key]);
            }
            unset($this->pp);
            $this->pp = NULL;
        }
    }

    function update($pproxy)
    {
        $this->clean();

        $this->pp = array();
        foreach ($pproxy as $pp_key => $pp_value) {
            $this->pp[$pp_key] = new ProviderProxyItem($pp_key, $pp_value);
        }
    }

    function realip($header, $ip)
    {
        fprintf(STDERR, "PP realip: [%d]\n", count($this->pp));
        if ($this->pp != NULL) {
            foreach ($this->pp as $pp_name => $pp_item) {
                // fprintf(STDERR, "PP loop: [%s][%s]\n", $pp_name, $ip);
                if ($pp_item->ipclass->check($ip)) {
                    if (isset($header[$pp_item->headitem])) {
                        fprintf(STDERR, "PP: match public proxy [%s][%s]\n", $pp_name, $header[$pp_item->headitem]);
                        return ($header[$pp_item->headitem]);
                    }
                }
            }
        }
        return ($ip);
    }
}

?>