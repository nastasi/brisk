<?php
/*
 *  brisk - brisk.phh
 *
 *  Copyright (C) 2006-2007 matteo.nastasi@milug.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABLILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details. You should have received a
 * copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc, 59 Temple Place -
 * Suite 330, Boston, MA 02111-1307, USA.
 *
 */

define(FTOK_PATH, "/var/lib/brisk");
define(LEGAL_PATH, "/tmp/legal_brisk");
define(PROXY_PATH, "/var/lib/brisk_proxy");
define(TABLES_N, 12);
define(PLAYERS_N, 3);
define(MAX_POINTS, 5);
define(MAX_PLAYERS, (20 + (PLAYERS_N * TABLES_N)));
define(SHM_DIMS, (50000 + 10000 * TABLES_N + 15000 * MAX_PLAYERS));
define(COMM_N, 12);
define(COMM_GEN_N, 50);
define(SESS_LEN, 13);
define(STREAM_TIMEOUT, 20);
define(EXPIRE_TIME_RD, 180);
define(EXPIRE_TIME_SMAMMA, 360); 
// BAN_TIME da allineare anche in commons.js
define(BAN_TIME, 900); 
define(GARBAGE_TIMEOUT, 10);
define(NICKSERV, "<i>SERVER</i>");

define(DBG_ONL2, 0x0001);
define(DBG_ONLY, 0x0002);
define(DBG_MAIN, 0x0004);
define(DBG_READ, 0x0008);
define(DBG_REA2, 0x0010);
define(DBG_SEND, 0x0020);
define(DBG_LOCK, 0x0040);
define(DBG_WRIT, 0x0080);
define(DBG_LOAD, 0x0100);
define(DBG_AUTH, 0x0200);

define(BRISK_DEBUG, 0);
// define(DEBUGGING, "local");

$G_false = FALSE;

$G_all_points = array( 11,10,4,3,2, 0,0,0,0,0 );
$G_brisk_version = "spawn-0.0.9";

$root_wellarr = Array ( 'Benvenuto in brisk (Ver. '.$G_brisk_version.'), <b>NOVITA\'</b>: chiuso il <b>bug</b> dei <b>tavoli bianchi</b>, versione beta.',
                        'Se vuoi iscriverti alla <a target="_blank" href="http://www.milug.org/cgi-bin/mailman/listinfo/ml-briscola">Mailing List</a>, cliccala!' );
$table_wellarr = Array ( 'Benvenuto al tavolo. Se almeno tre giocatori non sbloccano l\'uscita cliccando il lucchetto, chi esce non pu&ograve; risedersi a un qualunque tavolo per '.floor(BAN_TIME/60).' minuti.');


$G_room_help= '
<div style=\\"text-align: left; padding: 8px;\\">
<b>Descrizione</b><br>
Questa &egrave; un\'implementazione della briscola in cinque, cos&igrave; come &egrave; spiegata su
<a target=\\"_blank\\" href=\\"http://it.wikipedia.org/wiki/Briscola#Gioco_a_5\\">Wikipedia</a>; in breve &egrave; la variante con l\'asta prima sulla carta e poi sui punti.<br><br>
<b>Configurazione del browser.</b><br>
Occorre abilitare i cookies.<br>
<br>
<b>Uso del sito</b><br>
Potete sedervi a un tavolo o rimanere in piedi.<br>
Se al vostro tavolo si raggiungono i 5 giocatori inizia automaticamente la partita.<br>
<br>
<b>Partita</b><br>
All\'inizio vengono distribuite le carte e parte l\'asta; per partecipare all\'asta, quando sar&agrave; il vostro turno, potrete scegliere se andare avanti o passare cliccando sulle icone corrispondenti. Se si arriva ai punti, scrivete nella textbox il vostro rilancio e cliccate PUNTI.<br><br>
Chi vince l\'asta dovr&agrave; decidere il seme della carta scelta e inizier&agrave; la mano.<br>
Per giocare le carte dovrete trascinarle nel quadrato al centro del vostro schermo.<br><br>
Il vostro turno &egrave; sempre segnalato da una cornice verde lampeggiante intorno al quadrato al centro del vostro schermo.<br><br>
Durante la partita, se vorrete ricaricare la pagina, usate l\'apposito bottone \\"reload\\" in basso a destra.<br>
Dopo che &egrave; iniziata una partita per uscirne dovete chiedere agli altri giocatori di sbloccarla cliccando sul lucchetto. Se non si segue questa prassi, una volta usciti, non vi potrete sedere a nessun tavolo per '.floor(BAN_TIME/60).' minuti.
<dl>
<dt><b>Comandi della chat</b>
<dd><b>/nick <i>&lt;nuovo_nickname&gt;</i></b> - cambio di nickname
<dd>.. to be continue ..
</dl>
</div>
';

$G_room_about= '<br>
<div id=\\"header\\" class=\\"header\\">
  <img class=\\"nobo\\" src=\\"img/brisk_logo64.png\\">
  briscola chiamata in salsa ajax
</div>
<br><b>version '.$G_brisk_version.'</b><br><br>
Copyright 2006-2007 <a href=\\"mailto:brisk@alternativeoutput.it\\">Matteo Nastasi</a> (aka mop)<br><br>';


function xcape($s)
{
  $from = array (   '\\',     '@',        '|' );
  $to   = array ( '\\\\', '&#64;', '&brvbar;' );

  return (str_replace($from, $to, htmlentities($s,ENT_COMPAT,"UTF-8")));
}


class Card {
  var $value; /* 0 - 39 card value */
  var $stat;  /* 'bunch', 'hand', 'table', 'take' */
  var $owner; /* (table position 0-4) */
  // var $pos;   /* Pos in hand. */
  var $x;     /* When played the X position on the table of the owner. */
  var $y;     /* When played the Y position on the table of the owner. */

  function Card($value, $stat, $owner)
  {
    $this->value = $value;
    $this->stat  = $stat; // Card stat
    $this->owner = $owner;
  }

  function assign($stat,$owner)
  {
    $this->stat  = $stat; // Card stat
    $this->owner = $owner;
  }

  function setpos($pos)
  {
    $this->pos   = $pos;
  }

  function play($x,$y)
  {
    $this->stat = 'table'; // Card stat
    $this->x = $x;
    $this->y = $y;
  }

  function take($newown)
  {
    $this->stat = 'take'; // Card stat
    $this->owner = $newown;
  }
} // end class Card

class Table {
  var $player;
  var $player_n;
  var $card;
  var $mazzo;
  var $gstart;
  var $turn;

  var $asta_pla;
  var $asta_pla_n;
  var $asta_card;
  var $asta_pnt;
  
  var $mult;
  var $points;    // points array
  var $points_n;  // number of row of points
  var $total;

  var $asta_win;
  var $briscola;
  var $friend;
  
  var $old_reason;
  var $old_asta_pnt;
  var $old_pnt;
  var $old_win;
  var $old_friend;

  var $table_token;
  var $table_start;

  function Table() 
  {
  }
  
  function &create() 
  {
    GLOBAL $G_false;

    if (($thiz =& new Table()) == FALSE)
      return ($G_false);

    $thiz->player    =   array();
    $thiz->player_n  =   0;
    $thiz->card      =   FALSE;
    $thiz->asta_pla  =   array(); // TRUE: in auction, FALSE: out of the auction
    $thiz->asta_pla_n=  -1;
    $thiz->asta_card =  -1;
    $thiz->asta_pnt  =  -1;
    $thiz->mult      =   1;
    $thiz->points    =   array( );
    $thiz->points_n  =   0;
    $thiz->total     =   array( 0, 0, 0, 0, 0);
    $thiz->asta_win  =  -1;
    $thiz->briscola  =  -1;
    $thiz->friend    =  -1;
    $thiz->turn      =   0;
    $thiz->old_reason   = "";
    $thiz->old_asta_pnt = -1;
    $thiz->old_pnt      = -1;
    $thiz->old_win      = -1;
    $thiz->old_friend   = -1;

    $thiz->table_token  = "";
    $thiz->table_start  = 0;

    return ($thiz);
  }

  function &clone(&$from)
  {
    GLOBAL $G_false;
    
    if (($thiz =& new Table()) == FALSE)
      return ($G_false);
    
    $thiz->player = array();
    for ($i = 0 ; $i < $from->player_n ; $i++)
      $thiz->player[$i] = $from->player[$i];
    $thiz->player_n = $from->player_n;
    $thiz->card = $from->card;
    $thiz->mazzo = $from->mazzo; // REVIEW
    $thiz->gstart = $from->gstart;
    $thiz->turn = $from->turn;

    $thiz->asta_pla = $from->asta_pla;
    $thiz->asta_pla_n = $from->asta_pla_n;
    $thiz->asta_card = $from->asta_card;
    $thiz->asta_pnt = $from->asta_pnt;
    
    $thiz->mult = $from->mult;
    $thiz->points = $from->points;
    $thiz->points_n = $from->points_n;
    $thiz->total = $from->total;
    
    $thiz->asta_win = $from->asta_win;
    $thiz->briscola = $from->briscola;
    $thiz->friend = $from->friend;
    
    $thiz->old_reason = $from->old_reason;
    $thiz->old_asta_pnt = $from->old_asta_pnt;
    $thiz->old_pnt = $from->old_pnt;
    $thiz->old_win = $from->old_win;
    $thiz->old_friend = $from->old_friend;

    $thiz->table_token  = $from->table_token;
    $thiz->table_start  = $from->table_start;

    return ($thiz);
  }
  
  function &spawn(&$from)
  {
    GLOBAL $G_false;
    
    if (($thiz =& new Table()) == FALSE)
      return ($G_false);
    
    $thiz->player_n = $from->player_n;
    $thiz->card = &$thiz->bunch_create();
    $thiz->mazzo = $from->mazzo;
    $thiz->gstart = $from->gstart;
    $thiz->turn = $from->turn;

    $thiz->asta_pla = $from->asta_pla;
    $thiz->asta_pla_n = $from->asta_pla_n;
    $thiz->asta_card = $from->asta_card;
    $thiz->asta_pnt = $from->asta_pnt;
    
    $thiz->mult = $from->mult;
    $thiz->points = $from->points;
    $thiz->points_n = $from->points_n;
    $thiz->total = $from->total;
    
    $thiz->asta_win = $from->asta_win;
    $thiz->briscola = $from->briscola;
    $thiz->friend = $from->friend;
    
    $thiz->old_reason = $from->old_reason;
    $thiz->old_asta_pnt = $from->old_asta_pnt;
    $thiz->old_pnt = $from->old_pnt;
    $thiz->old_win = $from->old_win;
    $thiz->old_friend = $from->old_friend;

    // players are rearranged in an dedicated array
    $thiz->player = array();
    for ($i = 0 ; $i < $from->player_n ; $i++)
      $thiz->player[$i] = $i;

    $thiz->table_token  = $from->table_token;
    $thiz->table_start  = $from->table_start;

    return ($thiz);
  }
  
  function &bunch_create()
  {
    $ret = array();

    for ($i = 0 ; $i < 40 ; $i++) {
      $ret[$i] =& new Card($i, 'bunch', 'no_owner');
    }

    $oret = &$ret;
    return ($oret);
  }

  function bunch_make()
  {
    $ct = array(0,0,0,0,0);
    
    mt_srand(make_seed());
    
    for ($i = 39 ; $i >= 0 ; $i--) 
      $rest[$i] = $i;

    for ($i = 39 ; $i >= 0 ; $i--) {
      $rn = rand(0, $i);
      
      if ($rn == 0)
	log_main("RND ZERO");
      
      $id = $rest[$rn];

      $owner = $i % 5;
      $this->card[$id]->assign('hand', $owner);

      $rest[$rn] = $rest[$i];
      // $pubbpos[$rn2] = $pubbpos[$i];
    }
  }

  function init(&$userarr)
  {
    $this->mazzo    = rand(0,PLAYERS_N-1);
    $this->points_n = 0;
    $this->mult     = 1;
    $this->old_win  =-1;
    $this->old_reason = "";
    for ($i = 0 ; $i < PLAYERS_N ; $i++) {
      $this->total[$i] = 0;
      $user_cur = &$userarr[$this->player[$i]];
      $user_cur->exitislock = TRUE;
    }

    log_main("table::init: ci siamo");
  }

  function game_init(&$userarr)
  {
    log_rd2("GSTART 4");

    $this->gstart = ($this->mazzo+1) % PLAYERS_N;
    $this->bunch_make();
    
    
    $this->asta_pla_n = PLAYERS_N;
    $this->asta_card = -1;
    $this->asta_pnt  = 60;
    $this->asta_win  = -1;
    $this->briscola  = -1;
    $this->friend    = -1;
    $this->turn      =  0;
    
    for ($i = 0 ; $i < PLAYERS_N ; $i++) {
      $this->asta_pla[$i] = TRUE;
      $user_cur = &$userarr[$this->player[$i]];
      $user_cur->subst = 'asta';
      $user_cur->asta_card = -2;
      $user_cur->asta_pnt  = -1;
      $user_cur->handpt = $this->hand_points($i);
      // SEE function calculate_points(&$table)
    }
  }

  function game_next()
  {
    $this->mazzo  = ($this->mazzo + 1) % PLAYERS_N;
  }

  function getPlayer($idx)
  {
    return ($this->player[$idx]);
  }

  function setPlayer($idx, $player)
  {
    $this->player[$idx] = $player;
  }

  function user_add($idx)
  {
    $this->player[$this->player_n] = $idx;
    $this->player_n++;
    
    return ($this->player_n - 1);
  }
  
  function user_rem(&$room, &$user)
  {
    $tabpos = $user->table_pos;
    
    /* verifico la consistenza dei dati */
    if ($room->user[$this->player[$tabpos]] == $user) {
      
      /* aggiorna l'array dei giocatori al tavolo. */
      for ($i = $tabpos ; $i < $this->player_n-1 ; $i++) {
	$this->player[$i] = $this->player[$i+1];
	$user_cur = &$room->user[$this->player[$i]];
	$user_cur->table_pos = $i;
      }
      $this->player_n--;
    }
    else {
      log_main("INCONSISTENCY ON TABLE.");
    }
  }

  function hand_points($idx)
  {
    GLOBAL $G_all_points; 
    
    $tot = 0;
    
    for ($i = 0 ; $i < 40 ; $i++) {
      if ($this->card[$i]->owner != $idx)
	continue;

      $ctt = $this->card[$i]->value % 10;
      $tot += $G_all_points[$ctt];
    }

    return ($tot);
  }

  function exitlock_show(&$userarr, $table_pos)
  {
    $ct = $this->exitlock_calc(&$userarr, $table_pos);

    $ret = sprintf('exitlock_show(%d, %s);', $ct, 
		   ($userarr[$this->player[$table_pos]]->exitislock ? 'true' : 'false'));
    return ($ret);
  }

  function exitlock_calc(&$userarr, $table_pos)
  {
    $ct = 0;

    for ($i = 0 , $ct = 0 ; $i < PLAYERS_N ; $i++) {	
      if ($userarr[$this->player[$i]]->exitislock == FALSE)
	$ct++;
    }

    return ($ct);
  }
} // end class Table
  
class User {
  var $name;       // name of the user
  var $sess;       // session of the user
  var $ip;         // ip of the user
  var $lacc;       // last access (for the cleanup)
  var $laccwr;     // last access (for the cleanup)
  var $bantime;    // timeout to temporary ban
  var $stat;       // status (outdoor, room, table, game, ...)
  var $subst;      // substatus for each status   
  var $step;       // step of the current status
  var $trans_step; // step to enable transition between pages (disable == -1)
  var $comm;       // commands array
  var $asta_card;  // 
  var $asta_pnt;   //
  var $handpt;     // Total card points at the beginning of the current hand.
  var $exitislock; // Player can exit from the table ?
  var $table;      // id of the current table (if in table state)
  var $table_pos;  // idx on the table
  var $table_token;// token that identify a game on a table
  var $the_end;    // Flag to change the end of the session

  function User() {
  }

  function &create($name, $sess, $stat = "", $subst = "", $table = -1, $ip="0.0.0.0") {
    GLOBAL $G_false;

    if (($thiz =& new User()) == FALSE)
      return ($G_false);

    $thiz->name  = $name;
    $thiz->sess  = $sess;
    $thiz->ip    = $ip;
    $thiz->lacc   = time();
    $thiz->laccwr = time();
    $thiz->bantime = 0;
    $thiz->stat  = $stat;
    $thiz->subst  = $subst;
    $thiz->step  = 1;
    $thiz->trans_step  = -1;
    $thiz->comm  = array();
    $thiz->asta_card = -2;
    $thiz->asta_pnt  = -1;
    $thiz->handpt = -1;
    $thiz->exitislock = TRUE;
    
    $thiz->table = $table;
    $thiz->table_pos = -1;
    $thiz->table_token = "";

    return ($thiz);
  }

  function &clone(&$from)
  {
    GLOBAL $G_false;
    
    if (($thiz =& new User()) == FALSE)
      return ($G_false);
    
    $thiz->name       = $from->name;
    $thiz->sess       = $from->sess;
    $thiz->ip         = $from->ip;
    $thiz->lacc       = $from->lacc;
    $thiz->laccwr     = $from->laccwr;
    $thiz->bantime    = $from->bantime;
    $thiz->stat       = $from->stat;
    $thiz->subst      = $from->subst;
    $thiz->step       = $from->step;
    $thiz->trans_step = $from->trans_step;
    $thiz->comm       = array();

    $i_start = (1 > ($from->step - COMM_N) ? 1 : ($from->step - COMM_N)); 
    for ($i = $i_start ; $i < $from->step ; $i++) {
      $ii = $i % COMM_N;
      $thiz->comm[$ii] = $from->comm[$ii];
    }
    $thiz->asta_card  = $from->asta_card;
    $thiz->asta_pnt   = $from->asta_pnt;
    $thiz->handpt     = $from->handpt;
    $thiz->exitislock = $from->exitislock;
    $thiz->table      = $from->table;
    $thiz->table_pos  = $from->table_pos;
    $thiz->table_token = $from->table_token;
    $thiz->the_end    = $from->the_end;

    return ($thiz);
  }
  
  function &spawn(&$from, $table, $table_pos)
  {
    GLOBAL $G_false;
    
    if (($thiz =& new User()) == FALSE)
      return ($G_false);
    
    $thiz->name       = $from->name;
    $thiz->sess       = $from->sess;
    $thiz->ip         = $from->ip;
    $thiz->lacc       = $from->lacc;
    $thiz->laccwr     = $from->laccwr;
    $thiz->bantime    = $from->bantime;
    $thiz->stat       = $from->stat;
    $thiz->subst      = $from->subst;
    $thiz->step       = $from->step;
    $thiz->trans_step = $from->trans_step;
    $thiz->comm       = array();

    $i_start = (1 > ($from->step - COMM_N) ? 1 : ($from->step - COMM_N)); 
    for ($i = $i_start ; $i < $from->step ; $i++) {
      log_wr("TRY PUSH:".$i);
      $ii = $i % COMM_N;
      $thiz->comm[$ii]   = $from->comm[$ii];
    }
    
    $thiz->asta_card  = $from->asta_card;
    $thiz->asta_pnt   = $from->asta_pnt;
    $thiz->handpt     = $from->handpt;
    $thiz->exitislock = $from->exitislock;
    $thiz->the_end    = $from->the_end;

    $thiz->table      = $table;
    $thiz->table_pos  = $table_pos;
    $thiz->table_token = $from->table_token;

    return ($thiz);
  }
  
  function stat_set($stat) {
    log_main("sess: [".$this->sess. "] NEW STAT: [".$stat."]"); 
    $this->stat = "$stat";
    
    /*
    if (validate_sess($this->sess)) {
      $fp = fopen(PROXY_PATH."/".$this->sess.".stat", 'w');
      fwrite($fp, sprintf("%s\n",$this->stat));
      fclose($fp);
    }
    */
  }

  function step_set($step) {
    $this->step = $step;
    
    do {
      if (validate_sess($this->sess) == FALSE)
	break;
      if (($fp = @fopen(PROXY_PATH."/".$this->sess.".step", 'w')) == FALSE)
	break;
      fwrite($fp, pack("l",$this->step), 4);
      fclose($fp);

      return (TRUE);
    } while (0);

    return (FALSE);
  }

  function step_inc() {
    $this->step++;
    
    if (validate_sess($this->sess)) {
      $fp = fopen(PROXY_PATH."/".$this->sess.".step", 'w');
      fwrite($fp, pack("l",$this->step), 4);
      fclose($fp);

      return (TRUE);
    }
    
    return (FALSE);
  }
} // end class User


function step_get($sess) {
  $fp = FALSE;
  $ct = 0;
  do {
    if (validate_sess($sess) == FALSE)
      break;
  $ct = 1;
    if (($fp = @fopen(PROXY_PATH."/".$sess.".step", 'rb')) == FALSE)
      break;
  $ct = 2;
    if (($s = fread($fp, 4)) == FALSE)
      break;
  $ct = 3;
    if (strlen($s) != 4)
      break;
  $ct = 4;
    $arr = unpack('l', $s);
    fclose($fp);

    // log_rd2("A0: ".$arr[0]."  A1: ".$arr[1]);
    return ($arr[1]);
  } while (0);

  if ($fp != FALSE)
    fclose($fp);

  log_rd2("STEP_GET: return false ".$ct);
  return (FALSE);
}

function step_unproxy($sess) {
  log_rd2("UNPROXY: ".PROXY_PATH."/".$sess.".step");
  @unlink(PROXY_PATH."/".$sess.".step");
}


class Room {
  var $user;
  var $table;
  var $comm; // commands for many people
  var $step; // current step of the comm array
  var $garbage_timeout;

  function Room () {
    $this->user = array();
    $this->table = array();

    for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
      $this->user[$i] =& User::create("", "");
    }

    for ($i = 0 ; $i < TABLES_N ; $i++) 
      $this->table[$i] =& Table::create();
    $this->garbage_timeout = 0;
  }

  function garbage_manager($force)
  {
    $ismod = FALSE;

    log_rd2("garbage_manager START");

    /* Garbage collector degli utenti in timeout */
    $curtime = time();
    if ($force || $this->garbage_timeout < $curtime) {
      
      // Before all align times with table timeout
      for ($table_idx = 0 ; $table_idx < TABLES_N ; $table_idx++) {
	$table_cur =& $this->table[$table_idx];
	// if the table is complete and exists its shared mem we get the info about users lacc

	if ($table_cur->player_n == PLAYERS_N) {
	  log_main("PLAYERS == N TABLE ".$table_idx);
	  
	  if (($sem = Briskin5::lock_data($table_idx)) != FALSE) { 
	    log_main("bin5 lock data success");
	    
	    $no_recovery = FALSE;
	    if (($bri = &Briskin5::load_data($table_idx)) != FALSE) {
	      if ($table_cur->table_token != $bri->table_token) {
		log_main("ERROR: not matching table_token. Room: ".$table_cur->table_token."  Table: ".$bri->table_token);
		log_main("ERROR: not matching table_start. Room: ".$table_cur->table_start."  Table: ".$bri->table_start);
		$no_recovery = TRUE;
		$bri = FALSE;
	      }
	    }
	    
	    if ($bri != FALSE) {
	      //
	      //  SPAWN: JOIN
	      //
	      log_main("garbage_manager: bri loaded successfully.");
	      $bri->garbage_manager(TRUE);
	      
	      $bri_table = &$bri->table[0];

	      // is the end of the table
	      if ($bri->the_end == TRUE) {
		/*
		 *  DESTROY OF FINISHED TABLE && MOVE PLAYER TO ROOM AGAIN
		 */
		log_main("garbage_manager: INSIDE THE END.");

		for ($i = 0 ; $i < $bri_table->player_n ; $i++) {
		  // stat must be "table" by definition
		  $user_cur =& $this->user[$table_cur->player[$i]];
		  $bri_user =& $bri->user[$i];
		  
		  $user_cur->subst      = $bri_user->subst;
		  $user_cur->step       = $bri_user->step;
		  $user_cur->lacc       = $bri_user->lacc;
		  $user_cur->laccwr     = $bri_user->lacc;
		  $user_cur->bantime    = $bri_user->bantime;
		}
	      
		$this->room_join_wakeup(&$user_cur, FALSE, 0); 
		$table_cur->table_token = "";

		Briskin5::destroy_data($table_idx);
	      }
	      else {
		log_main("gm:: save_data");

		for ($i = 0 ; $i < $bri_table->player_n ; $i++) {
		  $this->user[$table_cur->player[$i]]->lacc = $bri->user[$i]->lacc;
		}
	      
		Briskin5::save_data(&$bri);
	      }
	    } // else if (($bri = &Briskin5::load_data($table_idx)) != FALSE) {
	    else if ($no_recovery == FALSE) {
	      log_main("ERROR: table ".$table_idx." unrecoverable join");

	      for ($i = 0 ; $i < $table_cur->player_n ; $i++) {
		$user_cur = &$this->user[$table_cur->player[$i]];
		$user_cur->subst = "shutdowner";
		$user_cur->step_inc();
		
		$ret = sprintf('stat = "%s"; subst = "%s";',  $cur_user->stat, $cur_user->subst);
		$ret .= "gst.st = ".($user_cur->step+1)."; ";
		$ret .= show_notify("<br>I dati del tavolo n&deg; ".$user_cur->table." sono inconsistenti, verranno resettati.<br><br>Torni in piedi.<br><br>", 2000, "Chiudi.", 400, 110);
		$user_cur->comm[$user_cur->step % COMM_N] = $ret;
		$user_cur->step_inc();
	      }

	      $this->room_join_wakeup(&$user_cur, TRUE, -2); 
	      $table_cur->table_token = "";
	    }

	    Briskin5::unlock_data($sem);
	  } // bri::lock_data
	} //  if ($table_cur->player_n == PLAYERS_N) {
      } //  for ($table_idx = 0 ; $table_idx < TABLES_N ; $table_idx++) {
    
      log_rd2("out new loop.");
		
      for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
	$user_cur = &$this->user[$i];
	
	log_rd2("User: ".$user_cur->name."  stat: ".$user_cur->stat."  subst: ".$user_cur->subst);
	  
	if ($user_cur->sess == "") 
	  continue;
	
	if ($user_cur->lacc + EXPIRE_TIME_RD < $curtime) {
	  // Auto logout dell'utente
	  log_rd2("AUTO LOGOUT.".($user_cur->lacc + EXPIRE_TIME_RD)." curtime ".$curtime);
	  
	  if ($user_cur->stat == 'table' || $user_cur->stat == 'room') {
	    log_auth($user_cur->sess, "Autologout session.");
	    
	    $tmp_sess = $user_cur->sess;
	    $user_cur->sess = "";
	    step_unproxy($tmp_sess);
	    $user_cur->name = "";
	    $user_cur->step = 0;
	    $user_cur->the_end = FALSE;
	    
	    log_rd2("AUTO LOGOUT.");
	    if ($user_cur->subst == 'sitdown' || $user_cur->stat == 'table')
	      $this->room_wakeup(&$user_cur);
	    else if ($user_cur->subst == 'standup')
	      $this->room_outstandup(&$user_cur);
	    else
	      log_rd2("LOGOUT FROM WHAT ???");
	  }
	}

	if ($user_cur->laccwr + EXPIRE_TIME_SMAMMA < $curtime) { // lo rimettiamo in piedi
	  if ($user_cur->stat == 'room' && $user_cur->subst == 'sitdown') {
	    $this->room_wakeup(&$user_cur);
	    $user_cur->comm[$user_cur->step % COMM_N] = "gst.st = ".($user_cur->step+1)."; ";
	    $user_cur->comm[$user_cur->step % COMM_N] .=  show_notify("<br>Sei stato inattivo per ".(EXPIRE_TIME_SMAMMA/60.0)." minuti. <br><br>Quindi ritorni tra i <b>Giocatori in piedi</b>.", 0, "torna ai tavoli", 400, 100);
	    $user_cur->step_inc();
	  }
	}
      }
      log_rd2("GARBAGE UPDATED!");
      
      $this->garbage_timeout = time() + GARBAGE_TIMEOUT;
      $ismod = TRUE;
    }

    return ($ismod);
  }


  function room_wakeup(&$user)
  {
    $table_idx = $user->table;
    $table = &$this->table[$table_idx];

    log_main("WAKEUP: begin function table:".$table_idx."  stat: ".$user->stat."  subst: ".$user->subst);

    $curtime = time();

    $from_table = ($user->stat == "table");
    if ($from_table) {
      log_main("WAKEUP: from table [".$user->table."] nplayers_n: ".$this->table[$user->table]->player_n);

      for ($i = 0 ; $i < $table->player_n ; $i++) {
	$user_cur = &$this->user[$table->player[$i]];
	log_main("PREIMPOST: INLOOP name: ".$user_cur->name);

	if ($user_cur != $user) {
	  $user_cur->stat_set("room");
	  $user_cur->subst = "sitdown";
	  $user_cur->laccwr = $curtime;
	}
	else if ($user->sess != "") {
	  $user_cur->stat_set("room");
	  $user_cur->subst = "standup";
	  $user_cur->laccwr = $curtime;
	  $user_cur->table = -1;
	}
      }
    }
    else {
      $user->stat_set("room");
      $user->subst = "standup";
      $user->laccwr = $curtime;
    }
    /* aggiorna l'array dei giocatori al tavolo. */
    $table->user_rem(&$this, &$user);

    for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
      $user_cur = &$this->user[$i];
      if ($user_cur->sess == '' || $user_cur->stat != 'room')
	continue;
      
      log_main("VALORI: name: ".$user_cur->name."from_table: ".$from_table."  tab: ".$user_cur->table." taix: ".$table_idx."  ucur: ".$user_cur."  us: ".$user);

      $ret = "gst.st = ".($user_cur->step+1)."; ";
      if ($from_table && ($user_cur->table == $table_idx || $user_cur == $user)) {
	$ret .= 'gst.st_loc++; the_end=true; window.onunload = null; document.location.assign("index.php");|';
	// $ret .= 'gst.st_loc++; document.location.assign("index.php");|';
	log_main("DOCUMENT.index.php: from table");
      }
      else if ($user_cur->stat == "room") {
	log_main("DOCUMENT.index.php: from table");

	$ret .= table_content($this, $user_cur, $table_idx);
	$ret .= standup_content($this, $user_cur);
	
	$act_content = table_act_content(FALSE, 0, $table_idx, $user->table);
	$ret .= sprintf('$("table_act%d").innerHTML = "%s";', $table_idx, $act_content);
	
	
	if ($user_cur == $user) {
	  // set the new status 
	  $ret .=  'subst = "standup"; ';
	  // clean the action buttons in other tables
	  for ($e = 0 ; $e < TABLES_N ; $e++) {
	    if ($this->table[$e]->player_n < PLAYERS_N)
	      $ret .= sprintf('$("table_act%d").innerHTML = "%s";', $e, table_act_content(TRUE, 0, $e, $user->table));
	  }
	}
	else {
	  $act_content = table_act_content(($user_cur->subst == 'standup'), $table->player_n, $table_idx, $user_cur->table);
	  $ret .= sprintf('$("table_act%d").innerHTML = "%s";', $table_idx, $act_content);
	}
      }
      log_wr("ROOM_WAKEUP: ".$ret);
      $user_cur->comm[$user_cur->step % COMM_N] = $ret;
      $user_cur->step_inc();
    }
  }

  function room_join_wakeup(&$user, $update_lacc = FALSE, $trans_delta)
  {
    $table_idx = $user->table;
    $table = &$this->table[$table_idx];
    
    log_main("JOIN_WAKEUP: begin function table:".$table_idx."  stat: ".$user->stat."  subst: ".$user->subst);

    $curtime = time();
    $user_wup = array();
    $user_wup_n = 0;
    $user_tab = array();
    $user_tab_n = 0;
    log_main("JOIN WAKEUP: from table [".$user->table."] nplayers_n: ".$this->table[$user->table]->player_n);
    
    for ($i = 0 ; $i < $table->player_n ; $i++) {
      $user_cur = &$this->user[$table->player[$i]];
      log_main("PREIMPOST INLOOP name: ".$user_cur->name);
      if ($user_cur->sess != "") {
	if ($update_lacc == TRUE) {
	  $user_cur->laccwr = $curtime;
	}
	log_main("cur: ".$user_cur->name."  subst: ".$user_cur->subst);
	if ($user_cur->subst == "shutdowned") {
	  $user_cur->stat_set("room");
	  $user_cur->subst = "sitdown";
	}
	else if ($user_cur->subst == "shutdowner") {
	  $user_cur->stat_set("room");
	  $user_cur->subst = "standup";
	  $user_cur->table = -1;
	  $user_wup[$user_wup_n++] = &$user_cur;
	}
	$user_tab[$user_tab_n++] = &$user_cur;
      }
    }

    for ($wup_idx = 0 ; $wup_idx < $user_wup_n  ; $wup_idx++)
      $table->user_rem(&$this, &$user_wup[$wup_idx]);

    /* aggiorna l'array dei giocatori al tavolo. */

    for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
      log_main("START LOOP");
      $user_cur = &$this->user[$i];
      if ($user_cur->sess == '' || $user_cur->stat != 'room') {
	log_main("name: ".$user_cur->name."skip   subst: ".$user_cur->subst);
	continue;
      }

      log_main("___");
      log_main("VALORI name: ".$user_cur->name."  tab: ".$user_cur->table." taix: ".$table_idx."  ucur: ".$user_cur."  us: ".$user);

      $ret = "gst.st = ".($user_cur->step+1)."; ";
      if ($user_cur->stat == "room") {
	log_main("DOCUMENT.index.php from table");

	$ret .= table_content($this, $user_cur, $table_idx);
	$ret .= standup_content($this, $user_cur);
	
	$act_content = table_act_content(FALSE, 0, $table_idx, $user_cur->table);
	$ret .= sprintf('$("table_act%d").innerHTML = "%s";', $table_idx, $act_content);
	
	for ($tab_idx = 0 ; $tab_idx < $user_tab_n  ; $tab_idx++)
	  if ($user_cur == $user_tab[$tab_idx]) 
	    break;

	// for users that wakeup the room will be reconstructed by index_rd.php
	if ($tab_idx < $user_tab_n) {
	  log_main("PRE show_room username: ".$user_cur->name."  STEP: ".$user_cur->step);
	  $user_cur->trans_step = $user_cur->step + 1 + $trans_delta;
	  $user_cur->comm[$user_cur->step % COMM_N] = "";
	  $user_cur->step_inc();
	  $user_cur->comm[$user_cur->step % COMM_N] = show_room(&$this, ($user_cur->step + 1), &$user_cur);
	  $user_cur->step_inc();
	  log_main("POST show_room username: ".$user_cur->name."  STEP: ".$user_cur->step);

	  continue;
	}
	log_main("JOIN_WAKEUP wup_idx ".$wup_idx."  wup_n ".$user_wup_n);

	log_main("JOIN_WAKEUP more");
	$act_content = table_act_content(($user_cur->subst == 'standup'), $table->player_n, $table_idx, $user_cur->table);
	$ret .= sprintf('$("table_act%d").innerHTML = "%s";', $table_idx, $act_content);
	log_main("JOIN_WAKEUP end more");
      }
      log_wr("ROOM_JOIN_WAKEUP: ".$ret);
      $user_cur->comm[$user_cur->step % COMM_N] = $ret;
      $user_cur->step_inc();
    }
  }

  function room_outstandup(&$user)
  {
    $this->room_sitdown(&$user, -1);
  }
  
  function table_update(&$user)
  {
    log_main("table_update: pre - USER: ".$user->name);

    $table_idx = $user->table;

    if ($table_idx > -1) 
      $table = &$this->table[$table_idx];
    
    for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
      $ret = "";
      $user_cur = &$this->user[$i];
      if ($user_cur->sess == '' || $user_cur->stat != 'room')
      continue;
      
      $ret = "gst.st = ".($user_cur->step+1)."; ";
      if ($table_idx > -1)
	$ret .= table_content($this, $user_cur, $table_idx);
      
      if ($user_cur == $user) {
	$ret .= sprintf('$("myname").innerHTML = "<b>%s</b>: ";',  xcape($user->name));
      }
      $user_cur->comm[$user_cur->step % COMM_N] = $ret;
      $user_cur->step_inc();
    }

    log_main("table_update: post");
  }

  function room_sitdown(&$user, $table_idx)
  {
    log_main("room_sitdown ".($user == FALSE ? "USER: FALSE" : "USER: ".$user->name));

    if ($table_idx > -1) 
      $table = &$this->table[$table_idx];
    
    for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
      $ret = "";
      $user_cur = &$this->user[$i];
      if ($user_cur->sess == '' || $user_cur->stat != 'room')
      continue;
      
      $ret = "gst.st = ".($user_cur->step+1)."; ";
      if ($table_idx > -1)
      $ret .= table_content($this, $user_cur, $table_idx);
      $ret .= standup_content($this, $user_cur);
      
      if ($user_cur == $user) {
	$ret .=  'subst = "sitdown"; ';
	// clean the action buttons in other tables
	for ($e = 0 ; $e < TABLES_N ; $e++) {
	  $act_content = table_act_content(FALSE, 0, $e, $user_cur->table);
	  $ret .= sprintf('$("table_act%d").innerHTML = "%s";', $e, $act_content);
	}
      }
      else if ($table_idx > -1) {
	if ($table->player_n == PLAYERS_N) {
	  $act_content = table_act_content(($user_cur->subst == 'standup'), PLAYERS_N, $table_idx, $user_cur->table);
	  $ret .= sprintf('$("table_act%d").innerHTML = "%s";', $table_idx, $act_content);
	}
      }
      $user_cur->comm[$user_cur->step % COMM_N] = $ret;
      $user_cur->step_inc();
    }
  }

  function chatt_send(&$user, $mesg)
  {
    if ($user->stat == 'table') {
      $table = &$this->table[$user->table];
    }
    
    $user_mesg = substr($mesg,6);
    
    $timecur = time();
    
    $dt = date("H:i ", $timecur);
    if (strncmp($user_mesg, "/nick ", 6) == 0) {
      log_main("chatt_send BEGIN");

      if (($name_new = validate_name(substr($user_mesg, 6))) == FALSE) {
	  $user->comm[$user->step % COMM_N] = "gst.st = ".($user->step+1)."; ";
	  $user->comm[$user->step % COMM_N] .= sprintf('chatt_sub("%s","Il nickname deve contenere almeno una lettera o una cifra.");', $dt.NICKSERV, xcape($name_new));
	  $user->step_inc();

	  return;
      }
      $user_mesg = "COMMAND ".$user_mesg;
      // Search dup name
      // change
      // update local graph
      // update remote graphs
      for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
	$user_cur = &$this->user[$i];
	// 	if ($user_cur->sess == '' || $user_cur->stat != 'room')
	if ($user_cur->sess == '')
	  continue;
	if ($user_cur->name == $name_new) {
	  $user->comm[$user->step % COMM_N] = "gst.st = ".($user->step+1)."; ";
	  $user->comm[$user->step % COMM_N] .= sprintf('chatt_sub("%s","Nickname <b>%s</b> gi&agrave; in uso.");', $dt.NICKSERV, xcape($name_new));
	  $user->step_inc();
	  break;
	}
      }
      if ($i == MAX_PLAYERS) {
	$user->name = $name_new;

      log_main("chatt_send start set");
	

	for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
	  log_main("chatt_send set loop");
	  
	  $user_cur = &$this->user[$i];
	  if ($user_cur->sess == '')
	    continue;
	  if ($user_cur->stat == 'room') {
	    if ($user->stat == 'room' && $user->subst == 'standup') {
	      $this->standup_update(&$user);
	    }
	    else if ($user->stat == 'room' && $user->subst == 'sitdown' ||
		     $user->stat == 'table') {
	      log_main("chatt_send pre table update");

	      $this->table_update(&$user);

	      log_main("chatt_send post table update");
	    }
	  }
	  else if ($user_cur->stat == 'table' && $user_cur->table == $user->table) {
	    $table = &$this->table[$user->table];
	    
	    $user_cur->comm[$user_cur->step % COMM_N] = "gst.st = ".($user_cur->step+1)."; ";
	    $user_cur->comm[$user_cur->step % COMM_N] .= sprintf('set_names(" %s", " %s", " %s", " %s", " %s"); ',
	        xcape($this->user[$table->player[($user_cur->table_pos)%PLAYERS_N]]->name),
	        xcape($this->user[$table->player[($user_cur->table_pos+1)%PLAYERS_N]]->name),
	        xcape($this->user[$table->player[($user_cur->table_pos+2)%PLAYERS_N]]->name),
	        (PLAYERS_N == 3 ? "" :  xcape($this->user[$table->player[($user_cur->table_pos+3)%PLAYERS_N]]->name)),
	        (PLAYERS_N == 3 ? "" :  xcape($this->user[$table->player[($user_cur->table_pos+4)%PLAYERS_N]]->name)));
	    if ($user_cur == $user)
	      $user_cur->comm[$user_cur->step % COMM_N] .= sprintf('$("myname").innerHTML = "<b>%s</b>";', 
								   xcape($user->name,ENT_COMPAT,"UTF-8"));
	    $user_cur->step_inc();
	  }
	}
      }
    }
    else {
      for ($i = 0 ; $i < ($user->stat == 'room' ? MAX_PLAYERS : PLAYERS_N) ; $i++) {
	if ($user->stat == 'room') {
	  $user_cur = &$this->user[$i];
	  if ($user_cur->sess == '' || $user_cur->stat != 'room')
	    continue;
	}
	else {
	  $user_cur = &$this->user[$table->player[$i]];
	}
	
	$user_cur->comm[$user_cur->step % COMM_N] = "gst.st = ".($user_cur->step+1)."; ";
	$user_cur->comm[$user_cur->step % COMM_N] .= sprintf('chatt_sub("%s","%s");',
							     $dt.xcape($user->name), xcape($user_mesg));
	$user_cur->step_inc();
      }
      log_legal($timecur, $user->sess, $user->name, 
		($user->stat == 'room' ? 'room' : 'table '.$user->table),$user_mesg);
    }
  }

  function &get_user($sess, &$idx)
  {
    GLOBAL $PHP_SELF, $G_false;

    if (validate_sess($sess)) {
      for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
	if (strcmp($sess, $this->user[$i]->sess) == 0) {
	  // find it
	  $idx = $i;
	  $ret = &$this->user[$i];
	  return ($ret);
	}
      }
      log_main(sprintf("get_user: Wrong sess from page [%s]",$PHP_SELF));
      // for ($i = 0 ; $i < MAX_PLAYERS ; $i++) 
      // log_main(sprintf("get_user: Wrong sess compared with [%s]",$this->user[$i]->sess));
    }
    else {
      log_main(sprintf("get_user: Wrong strlen [%s]",$sess));
    }

    return ($G_false);
  }

  /*
   * function &add_user(&$room, &$sess, &$idx, $name, $ip)
   *
   * RETURN VALUE:
   *   if ($idx != -1 && ret == FALSE)  =>  duplicated nick
   *   if ($idx == -2 && ret == FALSE)  =>  invalid name
   *   if ($idx == -1 && ret == FALSE)  =>  no space left
   *   if (ret == TRUE)                 =>  SUCCESS
   */
  function &add_user(&$sess, &$idx, $name, $ip)
  {
    GLOBAL $G_false;

    $idx = -1;
    $idfree = -1;
    
    if (($name_new = validate_name($name)) == FALSE) {
      $idx = -2;
      return ($G_false);
    }

    log_auth("XXX", sprintf("ARRIVA: [%s]", $sess));
    if (validate_sess($sess) == FALSE) 
      $sess = "";

    for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
      /* free user ? */
      if (strcmp($sess, $this->user[$i]->sess) == 0) {
	if ($idx == -1)
	  $idx = $i;
      }
      if ($idfree == -1 && strcmp("", $this->user[$i]->sess) == 0) {
	$idfree = $i;
      }
      if (strcmp($this->user[$i]->name, $name_new) == 0) {
	$idx = $i;
	break;
      }
    }
    if ($idx == -1)
      $idx = $idfree;

    log_auth("XXX", sprintf("TROVATO A QUESTO PUNTO [%d] sess [%s] name [%s]", $idx, $sess, $name_new));

    if ($idx != -1 && $i == MAX_PLAYERS) {
      /* SUCCESS */
      $curtime = time();
      if ($sess == "") {
	$this->user[$idx]->sess = uniqid("");
	$sess = $this->user[$idx]->sess;
	
      }
      else {
	$this->user[$idx]->sess = $sess;
      }
      $this->user[$idx]->name = $name_new;
      $this->user[$idx]->stat_set("room");
      $this->user[$idx]->step_set(0);
      while (array_pop($this->user[$idx]->comm) != NULL);
      $this->user[$idx]->subst = "standup";
      $this->user[$idx]->lacc =   $curtime;
      $this->user[$idx]->laccwr = $curtime;
      $this->user[$idx]->bantime = 0;
      $this->user[$idx]->ip = $ip;
      log_main(sprintf("TROVATO LIBERO A [%d] sess [%s] name [%s]", $idx, $sess, $name_new));
      
      return ($this->user[$idx]);
    }

    return ($G_false);
  }
  
  function standup_update(&$user)
  {
    for ($i = 0 ; $i < MAX_PLAYERS ; $i++) {
      $user_cur = &$this->user[$i];
      if ($user_cur->sess == '')
	continue;

      log_main("STANDUP START: ".$user_cur->stat);
      
      if ($user_cur->stat == 'room') {
	$user_cur->comm[$user_cur->step % COMM_N] = "gst.st = ".($user_cur->step+1)."; ".standup_content($this, $user_cur);
	if ($user_cur == $user)
	  $user_cur->comm[$user_cur->step % COMM_N] .= sprintf('$("myname").innerHTML = "<b>%s</b>: ";',  xcape($user->name));
	
	log_main("FROM STANDUP: NAME: ".$user_cur->name." SENDED: ".$user_cur->comm[$user_cur->step % COMM_N]);
	
	$user_cur->step_inc();
      }
    }
  }

  // Static functions
  function &init_data()
  {
    $room =& new Room();
    
    return $room;
  }
  

  function &load_data() 
  {
    GLOBAL $G_false, $sess;
    
    if (($tok = ftok(FTOK_PATH."/main", "B")) == -1) {
      echo "FTOK FAILED";
      exit;
    }
    
    if ($shm = shm_attach($tok, SHM_DIMS)) {
      $room = @shm_get_var($shm, $tok);
      
      log_only("bri ==  ".($room == FALSE ?   "FALSE" : "TRUE")."  bri ===  ".($room === FALSE ? "FALSE" : "TRUE")."  bri isset ".(isset($room) ?   "TRUE" : "FALSE"));
      if (isset($room)) 
	log_only("bri count ".count($room));
      
      if ($room == FALSE) {
	log_only("INIT MAIN DATA");
	
	$room =& Room::init_data();
	if (shm_put_var($shm, $tok, $room) == FALSE) {
	  log_only("PUT_VAR FALLITA ".strlen(serialize($room)));
	  log_only(serialize($room));
	}
      }
      
      shm_detach($shm);
      
      $ret = &$room;
      return ($ret);
    }
    
    return ($G_false);
  }
  

  function save_data(&$room) 
  {
    GLOBAL $sess;
    
    $ret =   FALSE;
    $shm =   FALSE;
    $isacq = FALSE;
    
    // var_dump($room);
    
    if (($tok = ftok(FTOK_PATH."/main", "B")) == -1) 
      return (FALSE);
    
    do {
      $isacq = TRUE;
      
      if (($shm = shm_attach($tok, SHM_DIMS)) == FALSE)
	break;
      
      // log_only("PUT_VAR DI ".strlen(serialize($room)));
      if (shm_put_var($shm, $tok, $room) == FALSE) {
	log_only("PUT_VAR FALLITA ".strlen(serialize($room)));
	log_only(serialize($room));
	break;
      }
      // log_main("QUI CI ARRIVA [".$room->user[0]->name."]");
      $ret = TRUE;
    } while (0);
    
    if ($shm)
      shm_detach($shm);
    
    return ($ret);
  }

  function lock_data()
  {
    GLOBAL $sess; 
    
    //  echo "LOCK: ".FTOK_PATH."/main";
    //  exit;
    if (($tok = ftok(FTOK_PATH."/main", "B")) == -1) {
      echo "FTOK FAILED";
      exit;
    }
    // echo "FTOK ".$tok."<br>";
    if (($res = sem_get($tok)) == FALSE) {
      echo "SEM_GET FAILED";
      exit;
    }
    if (sem_acquire($res)) {   
      log_lock("LOCK room");
      return ($res);
    }
    else
      return (FALSE);
  }
  
  function unlock_data($res)
  {
    GLOBAL $sess; 
    
    log_lock("UNLOCK room");

    return (sem_release($res));
  }
} // end class Room

function make_seed()
{
  list($usec, $sec) = explode(' ', microtime());
  return (float) $sec + ((float) $usec * 100000);
}


function log_only2($log) {
  if ((BRISK_DEBUG & DBG_ONL2) == 0)
    return;
  
  GLOBAL $sess;

  if (isset($sess) == FALSE)
    $ssess = "XXXX";
  else
    $ssess = $sess;

  if (($fp = @fopen(LEGAL_PATH."/brisk.log", 'a')) != FALSE) {
    fwrite($fp, sprintf("ONL2: [%s] [%s]\n", $ssess, $log));
    fclose($fp);
  }
}

function log_only($log) {
  if ((BRISK_DEBUG & DBG_ONLY) == 0)
    return;
  
  GLOBAL $sess;

  if (isset($sess) == FALSE)
    $ssess = "XXXX";
  else
    $ssess = $sess;

  if (($fp = @fopen(LEGAL_PATH."/brisk.log", 'a')) != FALSE) {
    fwrite($fp, sprintf("ONLY: [%s] [%s]\n", $ssess, $log));
    fclose($fp);
  }
}

function log_main($log) {
  if ((BRISK_DEBUG & DBG_MAIN) == 0)
    return;
  
  GLOBAL $sess;

  if (isset($sess) == FALSE)
    $ssess = "XXXX";
  else
    $ssess = $sess;

  if (($fp = @fopen(LEGAL_PATH."/brisk.log", 'a')) != FALSE) {
    fwrite($fp, sprintf("MAIN: [%s] [%s]\n", $ssess, $log));
    fclose($fp);
  }
}

function log_rd($log) {
  if ((BRISK_DEBUG & DBG_READ) == 0)
    return;
  
  GLOBAL $sess;

  if (isset($sess) == FALSE)
    $ssess = "XXXX";
  else
    $ssess = $sess;
      
  if (($fp = @fopen(LEGAL_PATH."/brisk.log", 'a')) != FALSE) {
    fwrite($fp, sprintf("READ: [%s] [%s]\n", $ssess, $log));
    fclose($fp);
  }
}

function log_rd2($log) {
  if ((BRISK_DEBUG & DBG_REA2) == 0)
    return;
  
  GLOBAL $sess;

  if (isset($sess) == FALSE)
    $ssess = "XXXX";
  else
    $ssess = $sess;
      

  if (($fp = @fopen(LEGAL_PATH."/brisk.log", 'a')) != FALSE) {
    fwrite($fp, sprintf("REA2: [%s] [%s]\n", $ssess, $log));
    fclose($fp);
  }
}

function log_send($log) {
  if ((BRISK_DEBUG & DBG_SEND) == 0)
    return;
  
  GLOBAL $sess;

  if (isset($sess) == FALSE)
    $ssess = "XXXX";
  else
    $ssess = $sess;
      
  if (($fp = @fopen(LEGAL_PATH."/brisk.log", 'a')) != FALSE) {
    fwrite($fp, sprintf("SEND: [%s] [%s]\n", $ssess, $log));
    fclose($fp);
  }
}

function log_lock($log) {
  if ((BRISK_DEBUG & DBG_LOCK) == 0)
    return;
  
  GLOBAL $sess;

  if (isset($sess) == FALSE)
    $ssess = "XXXX";
  else
    $ssess = $sess;

  if (($fp = @fopen(LEGAL_PATH."/brisk.log", 'a')) != FALSE) {
    fwrite($fp, sprintf("LOCK: [%s] [%s]\n", $ssess, $log));
    fclose($fp);
  }
}

function log_wr($log) {
  if ((BRISK_DEBUG & DBG_WRIT) == 0)
    return;
  
  GLOBAL $sess;

  if (isset($sess) == FALSE)
    $ssess = "XXXX";
  else
    $ssess = $sess;
      
  if (($fp = @fopen(LEGAL_PATH."/brisk.log", 'a')) != FALSE) {
    fwrite($fp, sprintf("WRIT: [%s] [%s]\n", $ssess, $log));
    fclose($fp);
  }
}

function log_load($log) {
  if ((BRISK_DEBUG & DBG_LOAD) == 0)
    return;
  
  GLOBAL $sess;

  if (isset($sess) == FALSE)
    $ssess = "XXXX";
  else
    $ssess = $sess;
      
  if (($fp = @fopen(LEGAL_PATH."/brisk.log", 'a')) != FALSE) {
    fwrite($fp, sprintf("LOAD: [%s] [%s]\n", $ssess, $log));
    fclose($fp);
  }
}

function log_auth($sess, $log) {
  if ((BRISK_DEBUG & DBG_AUTH) == 0)
    return;

  if (($fp = @fopen(LEGAL_PATH."/brisk.log", 'a')) != FALSE) {
    fwrite($fp, sprintf("AUTH: [%s] [%d] [%s]\n", $sess, time(), $log));
    fclose($fp);
  }
}


function log_legal($timecur, $sess, $name, $where, $mesg) 
{
  GLOBAL $_SERVER;

  if (($fp = @fopen(LEGAL_PATH."/legal.log", 'a')) != FALSE) {
    /* Unix time | session | nickname | IP | where was | mesg */
    fwrite($fp, sprintf("%ld|%s|%s|%s|%s|%s|\n", $timecur, $sess, $name, $_SERVER['REMOTE_ADDR'], $where , $mesg));
    fclose($fp);
  }
}




function lock_banlist()
{
  if (($tok = ftok(FTOK_PATH."/main", "L")) == -1) {
    echo "FTOK FAILED";
    exit;
  }
  if (($res = sem_get($tok)) == FALSE) {
    echo "SEM_GET FAILED";
    exit;
  }
  if (sem_acquire($res)) 
    return ($res);
  else
    return (FALSE);
}

function unlock_banlist($res)
{
  return (sem_release($res));
}

function table_act_content($isstanding, $sitted, $table, $cur_table)
{
  $ret = "";

  if ($isstanding) {
    if ($sitted < PLAYERS_N) {
      $ret = sprintf('<input type=\\"button\\" class=\\"button\\" name=\\"xhenter%d\\"  value=\\"Mi siedo.\\" onclick=\\"act_sitdown(%d);\\">', $table, $table);
    }
  }
  else {
    if ($table == $cur_table)
      $ret = sprintf('<input type=\\"button\\" class=\\"button\\" name=\\"xwakeup\\"  value=\\"Mi alzo.\\" onclick=\\"act_wakeup();\\">');
    else
      $ret = "";
  }
  return ($ret);
}

function table_content($room, $user, $table_idx)
{
  $content = "";
  $ret = "";
  // TODO
  //
  //   Si possono usare i dati nella classe table
  //

  $sess = $user->sess;
  $table = &$room->table[$table_idx];

  if ($user->stat != 'room')
    return;

  for ($i = 0 ; $i < $table->player_n ; $i++) {
    $user_cur = &$room->user[$table->player[$i]];

    if ($user_cur == $user) 
	{ $hilion = "<b>"; $hilioff = "</b>"; }
      else
	{ $hilion = ""; $hilioff = ""; }

    log_main($user_cur->name. sprintf(" IN TABLE [%d]", $table_idx));
    
    $content .= sprintf("%s%s%s<br>",$hilion, xcape($user_cur->name), $hilioff);
  }
  /*
  for ( ; $i < PLAYERS_N ; $i++)
    $content .= "<br>";
  */

  $ret .= sprintf('$("table%d").innerHTML = "%s";', $table_idx, $content);
  
  return ($ret);
}

function standup_content(&$room, $user)
{
  $ret = "";
  $content = "";

  if ($user->stat != 'room')
    return;

  for ($e = 0 , $ct = 0 ; $ct < 4 && $e < MAX_PLAYERS ; $e++) {
    if ($room->user[$e]->sess == "" || $room->user[$e]->stat != "room" || $room->user[$e]->name == "")
      continue;
    $ct++;
  }

  $content .= sprintf('<table cols=\\"%d\\" class=\\"table_standup\\">', $ct);

  for ($e = 0 , $ct = 0 ; $e < MAX_PLAYERS ; $e++) {
    if ($room->user[$e]->sess == "" || $room->user[$e]->stat != "room" || $room->user[$e]->name == "")
      continue;


    if ($room->user[$e]->subst == "standup") {
      if (($ct % 4) == 0) {
	$content .= '<tr>';
      }
      if ($room->user[$e] == $user) 
	{ $hilion = "<b>"; $hilioff = "</b>"; }
      else
	{ $hilion = ""; $hilioff = ""; }

      $content .= sprintf('<td class=\\"room_standup\\">%s%s%s</td>',$hilion, xcape($room->user[$e]->name), $hilioff);
      if (($ct % 4) == 3) {
	$content .= '</tr>';
      }
      $ct++;
    }
  }
  $content .= '</table>';
	
  $content2 = '<input class=\\"button\\" name=\\"logout\\" value=\\"Esco.\\" onclick=\\"window.onunload = null; act_logout();\\" type=\\"button\\">';
  $ret .= sprintf('$("standup").innerHTML = "%s";  $("esco").innerHTML = "%s";', 
		  $content, $content2);

  return ($ret);
}


function show_notify($text, $tout, $butt, $w, $h)
{
  log_main("SHOW_NOTIFY: ".$text);
  return sprintf('var noti = new notify(gst,"%s",%d,"%s",%d,%d);', $text, $tout, $butt, $w, $h);
}

function briscola_show($room, $table, $user)
{
  $ptnadd = "";
  $ret = "";

  if ($table->asta_card == 9) 
    $ptnadd = sprintf("<br>con %d punti", $table->asta_pnt);
  
  /* text of caller cell */
  if ($user->table_pos == $table->asta_win) 
    $ret .= sprintf('$("callerinfo").innerHTML = "Chiami%s:";', $ptnadd);
  else 
    $ret .= sprintf('$("callerinfo").innerHTML = "Chiama %s%s:";', 
		    xcape($room->user[$table->player[$table->asta_win]]->name), $ptnadd);

  $ret .= sprintf('$("caller").style.backgroundImage = \'url("img/brisk_caller_sand%d.png")\';',
		  $table->asta_win);
  $ret .= sprintf('$("callerimg").src = "img/%02d.png";', $table->briscola);
  $ret .= sprintf('$("caller").style.visibility = "visible";');
  $ret .= sprintf('$("chooseed").style.visibility = "hidden";');
  $ret .= sprintf('$("astalascio").style.visibility = "";');
  $ret .= sprintf('$("asta").style.visibility = "hidden";');
  $ret .= sprintf('show_astat(-2,-2,-2,-2,-2);');
  
  return ($ret);
}


function game_result($asta_pnt, $pnt)
{
  if ($asta_pnt == 61) {
    if ($pnt > 60)
      return (1);
    else if ($pnt == 60)
      return (0);
    else
      return (-1);
  }
  else {
    if ($pnt >= $asta_pnt)
      return (1);
    else
      return (-1);
  }
}

function multoval($mult)
{
  if ($mult == 2)
    return ("doppio");
  else if ($mult == 4)
    return ("quadruplo");
  else
    return (sprintf("%d-plo", $mult));
}

function show_table_info(&$room, &$table, $table_pos)
{
  $ret = "";
  $user = &$room->user[$table->player[$table_pos]];

  $pnt_min = $table->points_n - MAX_POINTS < 0 ? 0 : $table->points_n - MAX_POINTS;
  $noty = sprintf('<table class=\"points\"><tr><th></th>');
  
  // Names.
  for ($i = 0 ; $i < PLAYERS_N ; $i++) 
    $noty .= sprintf('<th class=\"td_points\">%s</th>', xcape($room->user[$table->player[$i]]->name));
  $noty .= sprintf("</tr>");

  // Points.
  log_main("show_table_info: pnt_min: ".$pnt_min."   Points_n: ".$table->points_n);

  for ($i = $pnt_min ; $i < $table->points_n ; $i++) {
    $noty .= sprintf('<tr><th class=\"td_points\">%d</th>', $i+1);
    for ($e = 0 ; $e < PLAYERS_N ; $e++) 
      $noty .= sprintf('<td class=\"td_points\">%d</td>', $table->points[$i % MAX_POINTS][$e]);
    $noty .= "</tr>";
  }

  // Total points.
  $noty .= '<tr><th class=\"td_points\">Tot.</th>';
  for ($e = 0 ; $e < PLAYERS_N ; $e++) 
    $noty .= sprintf('<td class=\"td_points\">%d</td>', $table->total[$e]);
  $noty .= "</tr></table>";

  if ($table->old_reason != "") {
    $noty .= sprintf("<hr><b>%s</b><br>", xcape($table->old_reason));
  }

  if ($table->old_win != -1) {
    $win = $table->player[$table->old_win];
    $fri = $table->player[$table->old_friend];

    $wol = game_result($table->old_asta_pnt, $table->old_pnt);

    if ($win != $fri) {
      $noty .= sprintf("<hr>Nell'ultima mano ha chiamato <b>%s</b>, il socio era <b>%s</b>,<br>", 
		       xcape($room->user[$win]->name),
		       xcape($room->user[$fri]->name));
      if ($table->old_pnt == 120) {
	$noty .= sprintf("hanno fatto <b>cappotto</b> EBBRAVI!.<hr>");
      }
      else {
	$noty .= sprintf("dovevano fare <b>%s</b> punti e ne hanno fatti <b>%d</b>: hanno <b>%s</b>.<hr>",
			 ($table->old_asta_pnt > 61 ? "almeno ".$table->old_asta_pnt :
			  'pi&ugrave; di 60'), $table->old_pnt,
			 ($wol == 1 ? "vinto" : ($wol == 0 ? "pareggiato" : "perso")));
      }
    }
    else {
      $noty .= sprintf("<hr>Nell'ultima mano <b>%s</b> si &egrave; chiamato in mano,<br>", 
		       xcape($room->user[$win]->name));
      if ($table->old_pnt == 120) {
	$noty .= sprintf("ha fatto <b>cappotto</b> EBBRAVO!.<hr>");
      }
      else {
	$noty .= sprintf("doveva fare <b>%s</b> punti e ne ha fatti <b>%d</b>: ha <b>%s</b>.<hr>",
			 ($table->old_asta_pnt > 61 ? "almeno ".$table->old_asta_pnt :
			  'pi&ugrave; di 60'), $table->old_pnt,
			 ($wol == 1 ? "vinto" : ($wol == 0 ? "pareggiato" : "perso")));
      }
    }
  }
  if ($table->mazzo == $table_pos) 
    $noty .= "Fai <b>tu</b> il mazzo,";
  else {
    $unam = xcape($room->user[$table->player[$table->mazzo]]->name);
    $noty .= "Il mazzo a <b>$unam</b>,";
  }

  if ($user->subst == 'asta') {
    if ($table->asta_win == -1)  // auction case
      $curplayer = $table->gstart % PLAYERS_N;
    else 
      $curplayer = $table->asta_win;
  }
  else if ($user->subst == 'game') {
    $curplayer = ($table->gstart + $table->turn) % PLAYERS_N;
  }


  if ($curplayer == $table_pos) {
    $noty .= " tocca a <b>te</b> giocare.";
  }
  else {
    $unam = xcape($room->user[$table->player[$curplayer]]->name);
    $noty .= " tocca a <b>$unam</b> giocare.";
  }

  if ($table->mult > 1) {
    $noty .= sprintf(" La partita vale <b>%s</b>.", multoval($table->mult));
  }
  $noty .= "<hr><br>";

  $ret .= show_notify($noty, 3000, "torna alla partita", 500, 400);
  
  return ($ret);
}

function root_wellcome($user)
{
  GLOBAL $root_wellarr;
  $ret = "";

  for ($i = 0 ; $i < count($root_wellarr) ; $i++)
    $ret .= sprintf('chatt_sub("ChanServ: ","%s");', str_replace('"', '\"', $root_wellarr[$i]));

  return ($ret);
}

function table_wellcome($user)
{
  GLOBAL $table_wellarr;
  $ret = "";

  for ($i = 0 ; $i < count($table_wellarr) ; $i++)
    $ret .= sprintf('chatt_sub("ChanServ: ","%s");', str_replace('"', '\"', $table_wellarr[$i]));

  return ($ret);
}

function show_room(&$room, $user_step, &$user)
{
  log_main("show_room: username: ".$user->name);


  $ret = sprintf('gst.st = %d;',  $user_step);
  $ret .= sprintf('stat = "%s";',  $user->stat);

  $ret .= root_wellcome($user);
  $ret .= sprintf('subst = "%s";', $user->subst);
  $ret .= sprintf('$("myname").innerHTML = "<b>%s</b>";', xcape($user->name,ENT_COMPAT,"UTF-8"));
  for ($i = 0 ; $i < TABLES_N ; $i++) {
    $ret .= table_content($room, $user, $i);
    $act_content = table_act_content(($user->subst == 'standup'), 
				     $room->table[$i]->player_n, $i, $user->table);
    $ret .= sprintf('$("table_act%d").innerHTML = "%s";', $i, $act_content);
  }
  $ret .= standup_content($room, $user);
  
  return ($ret);
}



/* show table 
is_transition (is from room to table ?)
is_again      (is another game)

Examples                    of $is_transition, $is_again:
  from reload of the page:              FALSE, FALSE
  from sitdown in room:                  TRUE, FALSE
  from table: asta cmd e tutti passano:  TRUE, TRUE
  from table: fine partita:              TRUE, TRUE
 */
function show_table(&$room, &$user, $sendstep, $is_transition, $is_again)
{
  $table_idx = $user->table;
  $table = &$room->table[$table_idx];
  $table_pos = $user->table_pos;

  $ret = "table_init();";
  $ret .= $table->exitlock_show(&$room->user, $table_pos);
  if (!$is_again) {
    /* GENERAL STATUS */
    $ret .= sprintf( 'gst.st = %d; stat = "%s"; subst = "%s"; table_pos = %d;',
		     $sendstep, $user->stat, $user->subst, $table_pos);

    log_rd(sprintf( 'SHOW_TABLE: gst.st = %d; stat = "%s"; subst = "%s"; table_pos = %d;',
		     $sendstep, $user->stat, $user->subst, $table_pos));

    /* BACKGROUND */
    $ret .= "background_set();";
    
    /* USERS INFO */
    $ret .= sprintf('$("myname").innerHTML = "<b>%s</b>";', xcape($user->name,ENT_COMPAT,"UTF-8"));
    $ret .= sprintf('set_names(" %s", " %s", " %s", " %s", " %s"); ',
		    xcape($room->user[$table->player[($table_pos)%PLAYERS_N]]->name),
		    xcape($room->user[$table->player[($table_pos+1)%PLAYERS_N]]->name),
		    xcape($room->user[$table->player[($table_pos+2)%PLAYERS_N]]->name),
		    (PLAYERS_N == 3 ? "" :  xcape($room->user[$table->player[($table_pos+3)%PLAYERS_N]]->name)),
		    (PLAYERS_N == 3 ? "" :  xcape($room->user[$table->player[($table_pos+4)%PLAYERS_N]]->name)));
  }
  /* NOTIFY FOR THE CARD MAKER */
  if ($is_transition) { //  && $user->subst ==  "asta" superfluo
    $ret .= show_table_info(&$room, &$table, $table_pos);
  }
  if (!$is_again) 
    $ret .= table_wellcome($user);

  if ($is_transition && !$is_again) { // appena seduti al tavolo, play della mucca
    $ret .= playsound("cow.mp3");
  }


  /* CARDS */
  if ($is_transition) { //  && $user->subst ==  "asta" superfluo
    $ret .= "|";
    
    for ($i = 0 ; $i < 8 ; $i++) {
      for ($e = 0 ; $e < PLAYERS_N ; $e++) {
	$ct = 0;
	for ($o = 0 ; $o < 40 && $ct < $i+1 ; $o++) {
	  if ($table->card[$o]->owner == (($e + $table->gstart) % PLAYERS_N)) {
	    $ct++;
	    if ($ct == $i+1)
	      break;
	  }
	}
	log_rd("O ".$o." VAL ".$table->card[$o]->value." Owner: ".$table->card[$o]->owner);
	
	$ret .= sprintf( ' card_send(%d,%d,%d,%8.2f,%d);|', ($table->gstart + $e) % PLAYERS_N, 
			 $i, ((($e + PLAYERS_N - $table_pos + $table->gstart) % PLAYERS_N) == 0 ?
			      $table->card[$o]->value : -1), 
			 ($i == 7 && $e == (PLAYERS_N - 1) ? 1 : 0.5),$i+1);
      }
    }    
  }
  else {
    $taked  = array(0,0,0,0,0);
    $inhand = array(0,0,0,0,0);
    $ontabl  = array(-1,-1,-1,-1,-1);
    $cards  = array();

    for ($i = 0 ; $i < 40 ; $i++) {
      if ($table->card[$i]->stat == 'hand') {
	if ($table->card[$i]->owner == $table_pos) {
	  $cards[$inhand[$table->card[$i]->owner]] = $table->card[$i]->value;
	}
	$inhand[$table->card[$i]->owner]++;
      }
      else if ($table->card[$i]->stat == 'take') {
	log_main("Card taked: ".$table->card[$i]->value."OWN: ".$table->card[$i]->owner);
	$taked[$table->card[$i]->owner]++;
      }
      else if ($table->card[$i]->stat == 'table') {
	$ontabl[$table->card[$i]->owner] = $i;
      }
    }
    $logg = "\n";
    for ($i = 0 ; $i < PLAYERS_N ; $i++) {
      $logg .= sprintf("INHAND: %d   IN TABLE %d   TAKED %d\n", $inhand[$i], $ontabl[$i], $taked[$i]);
    }
    log_main("Stat table: ".$logg);

    /* Set ours cards. */
    $oursarg = "";
    for ($i = 0 ; $i < $inhand[$table_pos] ; $i++) 
      $oursarg .= ($i == 0 ? "" : ", ").$cards[$i];
    for ($i = $inhand[$table_pos] ; $i < 8 ; $i++) 
      $oursarg .= ($i == 0 ? "" : ", ")."-1";
    $ret .= sprintf('card_setours(%s);', $oursarg);

    /* Dispose all cards */
    for ($i = 0 ; $i < PLAYERS_N ; $i++) {
      /* Qui sotto al posto di + 1 c'era + ->gstart ... credo in modo errato */
      $ret .= sprintf('cards_dispose(%d,%d,%d);', $i,
		      $inhand[$i], $taked[$i]);

      if ($ontabl[$i] != -1) {
	$ret .= sprintf('card_place(%d,%d,%d,%d,%d);',$i, $inhand[$i], 
			$table->card[$ontabl[$i]]->value, 
			$table->card[$ontabl[$i]]->x, $table->card[$ontabl[$i]]->y);
      }
    }
  }

  /* Show auction */
  if ($user->subst == 'asta') {

    /* show users auction status */
    $showst = "";
    for ($i = 0 ; $i < PLAYERS_N ; $i++) {
      $user_cur = &$room->user[$table->player[$i]];
      $showst .= sprintf("%s%d", ($i == 0 ? "" : ", "), 
			 ($user_cur->asta_card < 9 ? $user_cur->asta_card : $user_cur->asta_pnt));
    }
    if (PLAYERS_N == 3)
    	$showst .= ",-2,-2";
    $ret .= sprintf('show_astat(%s);', $showst);

    if ($table->asta_win != -1 && $table->asta_win == $table_pos) {
      /* show card chooser */
      $ret .= sprintf('choose_seed(%s); $("astalascio").style.visibility = ""; $("asta").style.visibility = "hidden";',
		      $table->asta_card);
    }
    else {
      /* show auction */
      if ($table_pos == ($table->gstart % PLAYERS_N) &&
	  $table->asta_win == -1) 
	$ret .= sprintf('dispose_asta(%d,%d, %s);', 
			$table->asta_card + 1, $table->asta_pnt+1, ($user->handpt <= 2 ? "true" : "false"));
      else
	$ret .= sprintf('dispose_asta(%d,%d, %s);',
			$table->asta_card + 1, -($table->asta_pnt+1), ($user->handpt <= 2 ?  "true" : "false"));
    }

    /* Remark */
    if ($table->asta_win == -1) { // auction case
      if ($table_pos == ($table->gstart % PLAYERS_N)) 
	$ret .= "remark_on();";
      else
	$ret .= "remark_off();";
    }
    else { // chooseed case
      if ($table_pos == $table->asta_win) 
	$ret .= "remark_on();";
      else
	$ret .= "remark_off();";
    }
  }
  else if ($user->subst == 'game') {
    /* HIGHLIGHT */
    if (($table->gstart + $table->turn) % PLAYERS_N == $table_pos) 
      $ret .= "is_my_time = true; remark_on();";
    else
      $ret .= "remark_off();";
    
    /* WHO CALL AND WATH */
    $ret .= briscola_show($room, $table, $user);
    
  }
  return ($ret);
} // end function show_table(...

function calculate_winner(&$table)
{
  $briontab = FALSE;
  $ontab = array();
  $ontid = array();
  $cur_win  =  -1;
  $cur_val  = 100;
  $cur_seed = $table->briscola - ($table->briscola % 10);

  for ($i = 0 ; $i < 40 ; $i++) {
    if ($table->card[$i]->stat != "table")
      continue;

    log_wr(sprintf("Card On table: [%d]", $i));

    $v = $table->card[$i]->value; 
    $ontab[$table->card[$i]->owner] = $v;
    $ontid[$table->card[$i]->owner] = $i;
    /* se briscola setto il flag */
    if (($v - ($v % 10)) == $cur_seed)
      $briontab = TRUE;
  }

  if ($briontab == FALSE) {
    $cur_win  = $table->gstart;
    $cur_val  = $ontab[$cur_win];
    $cur_seed = $cur_val - ($cur_val % 10);
  }

  for ($i = 0 ; $i < PLAYERS_N ; $i++) {
    if (($ontab[$i] - ($ontab[$i] % 10)) == $cur_seed) {
      if ($ontab[$i] < $cur_val) {
	$cur_val = $ontab[$i];
	$cur_win = $i;
      }
    }
  }

  for ($i = 0 ; $i < PLAYERS_N ; $i++) {
    $table->card[$ontid[$i]]->owner = $cur_win;
    $table->card[$ontid[$i]]->stat =  "take"; // Card stat
  }
  return ($cur_win);
}

function calculate_points(&$table)
{
  GLOBAL $G_all_points; 

  $pro = 0;

  if ($table->asta_pnt == 60)
    $table->asta_pnt = 61;

  $table->old_reason = "";
  $table->old_win = $table->asta_win;
  $table->old_friend = $table->friend;
  $table->old_asta_pnt = $table->asta_pnt;

  for ($i = 0 ; $i < 40 ; $i++) {
    $ctt = $table->card[$i]->value % 10;
    $own = $table->card[$i]->owner;
    if ($own == $table->asta_win || $own == $table->friend) 
      $pro += $G_all_points[$ctt];
  }

  log_wr(sprintf("PRO: [%d]", $pro));

  
  if ($table->asta_pnt == 61 && $pro == 60) { // PATTA !
    $table->points[$table->points_n % MAX_POINTS] = array();
    for ($i = 0 ; $i < PLAYERS_N ; $i++) 
      $table->points[$table->points_n % MAX_POINTS][$i] = 0;
    $table->points_n++;
    $table->old_pnt = $pro;
    $table->mult *= 2;

    return;
  }

  if ($pro >= $table->asta_pnt) 
    $sig = 1;
  else
    $sig = -1;

  $table->points[$table->points_n % MAX_POINTS] = array();
  for ($i = 0 ; $i < 5 ; $i++) {
    if ($i == $table->asta_win) 
      $pt = ($i == $table->friend ? 4 : 2);
    else if ($i == $table->friend) 
      $pt = 1;
    else
      $pt = -1;

    log_wr(sprintf("PRO: pt[%d][%d] = %d", $table->points_n % MAX_POINTS, $i, $pt));

    $pt = $pt * $sig * $table->mult * ($pro == 120 ? 2 : 1);

    log_wr(sprintf("PRO:[%d][%d][%d]", $sig, $table->mult, ($pro == 120 ? 2 : 1)));
    
    $table->points[$table->points_n % MAX_POINTS][$i] = $pt;
    $table->total[$i] += $pt;
  }
  $table->points_n++;
  $table->old_pnt = $pro;
  $table->mult = 1;
}

function validate_sess($sess) 
{
  if (strlen($sess) == SESS_LEN) 
    return (TRUE);
  else
    return (FALSE);
}

function validate_name($name) 
{
  $name_new = str_replace(' ', '_', substr(trim($name),0,12));

  for ($i = 0 ; $i < strlen($name_new) ; $i++) {
    $c = $name_new[$i];
    if (($c >= "a" && $c <= "z") || ($c >= "A" && $c <= "Z") || ($c >= "0" && $c <= "9"))
      return ($name_new);
  }

  return (FALSE);
}

function playsound($filename)
{
  return (sprintf('playsound("flasou", "%s");', $filename));
}

function secstoword($secs)
{
  $mins = floor($secs / 60);
  $secs = $secs % 60;
  if ($mins > 0) 
    $ret = sprintf("%d minut%s%s", $mins, ($mins > 1 ? "i" : "o"), ($secs > 0 ? " e " : ""));
  
  if ($secs > 0)
    $ret .= sprintf("%d second%s", $secs, ($secs > 1 ? "i" : "o"));
  
  return ($ret);
}

?>
