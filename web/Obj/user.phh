<?php
/*
 *  brisk - Obj/user.phh
 *
 *  Copyright (C) 2012 Matteo Nastasi
 *                          mailto: nastasi@alternativeoutput.it 
 *                                  matteo.nastasi@milug.org
 *                          web: http://www.alternativeoutput.it
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABLILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details. You should have received a
 * copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc, 59 Temple Place -
 * Suite 330, Boston, MA 02111-1307, USA.
 */

require_once("${G_base}Obj/transports.phh");


// User flags
define('USER_FLAG_AUTH',     0x02);

define('USER_FLAG_MAP_AUTH', 0x0c);
define('USER_FLAG_LISTAUTH', 0x04);
define('USER_FLAG_ISOLAUTH', 0x08);

define('USER_FLAG_DBFAILED', 0x10);

//   user status
define('USER_FLAG_S_NORM',  0x000); // done
define('USER_FLAG_S_PAU',   0x100); // done
define('USER_FLAG_S_OUT',   0x200); // done
define('USER_FLAG_S_DOG',   0x300); // done
define('USER_FLAG_S_EAT',   0x400); // done
define('USER_FLAG_S_WRK',   0x500); // done
define('USER_FLAG_S_SMK',   0x600); // done
define('USER_FLAG_S_EYE',   0x700); // done
define('USER_FLAG_S_RABB',  0x800); // done
define('USER_FLAG_S_SOCC',  0x900); // done
define('USER_FLAG_S_BABY',  0xa00); // done
define('USER_FLAG_S_MOP',   0xb00); // done
define('USER_FLAG_S_BABBO',   0xc00); // done
define('USER_FLAG_S_RENNA',   0xd00); // done
define('USER_FLAG_S_PUPAZ',   0xe00); // done
define('USER_FLAG_S_VISCH',   0xf00); // done

define('USER_FLAG_S_ALL',   0xf00); // done

/* type of user normal, supporter etc ... */
define('USER_FLAG_TY_ALL',     0xff0000); // done
define('USER_FLAG_TY_NORM',    0x010000); // done
define('USER_FLAG_TY_SUPER',   0x020000); // done
define('USER_FLAG_TY_CERT',    0x040000); // done
//  ... other usefull status ...
define('USER_FLAG_TY_FIRONLY', 0x200000); // done
// define('USER_FLAG_TY_free-to-use', 0x400000); // done
define('USER_FLAG_TY_DISABLE', 0x800000); // done

// ... reasons for disabling account ...
define('USER_DIS_REA_INVMAIL', 1);
define('USER_DIS_REA_LICENCE', 2);
define('USER_DIS_REA_BANNED',  3);

// 240 is the right value, 600 is for fwrite error test
define('RD_ENDTIME_DELTA',  240);
define('RD_KEEPALIVE_TOUT',   4);

$S_load_stat = array( 'rU_heavy'      => 0,
                      'lL_laccgarb'   => 0,
                      'wU_lacc_upd'   => 0,
                      'wR_garbage'    => 0,
                      'wR_minusone'   => 0,
                      'wR_the_end'    => 0 );

$mlang_user = array(
                     'btn_backtotab'  => array('it' => ' torna ai tavoli ',
                                               'en' => ' back to tables '),
                     'btn_btotabsup'  => array('it' => ' grazie della donazione, torna ai tavoli ',
                                               'en' => ' thank you for donation, back to tables '),

                     'btn_agree'      => array('it' => ' accetto ',
                                               'en' => ' agree '),
                     'btn_refuse'     => array('it' => ' rifiuto ',
                                               'en' => ' refuse '),
                     'btn_after'      => array('it' => ' leggo poi ',
                                               'en' => ' read later ')
                     );

class User {
  var $room;       // reference to the room where the user is registered
  var $idx;        // index in the room users array when you are in game
  var $idx_orig;   // index in the room table users array when you aren't in game
  var $code;       // authentication code
  var $name;       // name of the user
  var $sess;       // session of the user
  var $ip;         // ip of the user
  var $lacc;       // last access (for the cleanup)
  var $laccwr;     // last access (for the cleanup)
  var $bantime;    // timeout to temporary ban
  var $stat;       // status (outdoor, room, table, game, ...)
  var $subst;      // substatus for each status   
  var $step;       // step of the current status
  var $trans_step; // step to enable transition between pages (disable == -1)

  var $rd_socket;  // socket handle of push stream
  var $rd_endtime; // end time for push stream
  var $rd_stat;    // actual status of push stream
  var $rd_subst;   // actual substatus of push stream
  var $rd_step;    // actual step of push stream
  var $rd_from;    // referer
  var $rd_scristp; // current script step (for each session) 
  var $rd_kalive;  // if no message are sent after RD_KEEPALIVE_TOUT secs we send a keepalive from server
  var $rd_cache;   // place where store failed fwrite data
  var $rd_zls;     // zlibstream object handle if compressed stream, else FALSE
  var $rd_transp;  // class that define stream encapsulation type (iframe, xhr, ...)
  var $rd_is_chunked; // is the transport chunked or not ?

  var $comm;       // commands array
  // var $asta_card;  // 
  // var $asta_pnt;   //
  // var $handpt;     // Total card points at the beginning of the current hand.
  // var $exitislock; // Player can exit from the table ?

  // FIXME: the table_orig field must be removed after table field verify of index management (in spawned table
  //        it is allways ZERO
  var $table;      // id of the current table when you are in game
  var $table_orig; // id of the current table when you aren't in game
  var $table_pos;  // idx on the table
  var $table_token;// token that identify a game on a table
  var $flags;      // Bitfield with: AUTHENTICATE: 0x02 
  var $rec;        // field with user db record or FALSE
  var $the_end;    // Flag to change the end of the session

  var $chat_lst;      // Last chat line
  var $chattime;      // Array of chat times
  var $chat_cur;      // Current chat line number
  var $chat_ban;      // Time for ban chat
  var $chat_dlt;      // Delta t for ban
  var $shm_sz;

  const BASE = "";    // basepath for absolute web references

  function User() {
  }

  static function create(&$room, $idx, $name, $sess, $stat = "", $subst = "", $table = -1, $ip="0.0.0.0") {
    if (($thiz = new User()) == FALSE)
      return (FALSE);

    $thiz->room       = &$room;
    $thiz->idx        = $idx;
    $thiz->idx_orig   = $idx;
    $thiz->code       = -1;
    $thiz->name       = $name;
    $thiz->sess       = $sess;
    $thiz->ip         = $ip;
    $thiz->lacc       = time();
    $thiz->laccwr     = time();
    $thiz->bantime    = 0;
    $thiz->stat       = $stat;
    $thiz->subst      = $subst;
    $thiz->step       = 1;
    $thiz->trans_step = -1;
    $thiz->comm       = array();

    $thiz->rd_socket  = NULL;
    $thiz->rd_endtime = -1;
    $thiz->rd_stat    = -1;
    $thiz->rd_subst   = "";
    $thiz->rd_step    = -1;
    $thiz->rd_from    = "";
    $thiz->rd_scristp = -1;
    $thiz->rd_kalive  = -1;
    $thiz->rd_cache   = "";
    $thiz->rd_zls     = FALSE;
    $thiz->rd_transp  = NULL;
    $thiz->rd_is_chunked = FALSE;

    $thiz->asta_card  = -2;
    $thiz->asta_pnt   = -1;
    $thiz->handpt     = -1;
    $thiz->exitislock = TRUE;

    $thiz->flags      = 0x00;
    $thiz->rec        = FALSE;

    $thiz->chattime   = array_fill(0, CHAT_N, 0);
    $thiz->chat_cur   = 0;
    $thiz->chat_lst   = "";
    $thiz->chat_ban   = 0;
    $thiz->chat_dlt   = 0;

    $thiz->table_orig = $table;
    $thiz->table      = $table;
    $thiz->table_pos  = -1;
    $thiz->table_token= "";
    $thiz->shm_sz = SHM_DIMS_U_MIN;
    return ($thiz);
  }

  function copy($from)
  {
    $this->idx        = $from->idx;
    $this->idx_orig   = $from->idx;
    $this->code       = $from->code;
    $this->name       = $from->name;
    $this->sess       = $from->sess;
    $this->ip         = $from->ip;
    $this->lacc       = $from->lacc;
    $this->laccwr     = $from->laccwr;
    $this->bantime    = $from->bantime;
    $this->stat       = $from->stat;
    $this->subst      = $from->subst;
    $this->step       = $from->step;
    $this->trans_step = $from->trans_step;
    $this->comm       = array();

    $i_start = (1 > ($from->step - COMM_N) ? 1 : ($from->step - COMM_N)); 
    for ($i = $i_start ; $i < $from->step ; $i++) {
        $ii = $i % COMM_N;
        if (isset($from->comm[$ii])) {
            $this->comm[$ii] = $from->comm[$ii];
        }
    }
    $this->asta_card  = $from->asta_card;
    $this->asta_pnt   = $from->asta_pnt;
    $this->handpt     = $from->handpt;
    $this->exitislock = $from->exitislock;

    $this->flags      = $from->flags;
    $this->rec        = $from->rec;

    $this->chattime   = array();
    for ($i = 0 ; $i < CHAT_N ; $i++)
      $this->chattime[$i] = $from->chattime[$i];
    $this->chat_cur   = $from->chat_cur;
    $this->chat_lst   = $from->chat_lst;
    $this->chat_ban   = $from->chat_ban;
    $this->chat_dlt   = $from->chat_dlt;

    $this->table_orig = $from->table_orig;
    $this->table      = $from->table;
    $this->table_pos  = $from->table_pos;
    $this->table_token = $from->table_token;
    $this->the_end    = $from->the_end;
    $this->shm_sz     = $from->shm_sz;
    return (TRUE);
  }


  static function myclone($from)
  {
    if (($thiz = new User()) == FALSE)
      return (FALSE);
    
    $thiz->copy($from);

    return ($thiz);
  }
  
  static function spawn($from, $table, $table_pos)
  {
    if (($thiz = new User()) == FALSE)
      return (FALSE);
    
    $thiz->idx        = $from->idx;
    $thiz->idx_orig   = $from->idx;
    $thiz->code       = $from->code;
    $thiz->name       = $from->name;
    $thiz->sess       = $from->sess;
    $thiz->ip         = $from->ip;
    $thiz->lacc       = $from->lacc;
    $thiz->laccwr     = $from->laccwr;
    $thiz->bantime    = $from->bantime;
    $thiz->stat       = $from->stat;
    $thiz->subst      = $from->subst;
    $thiz->step       = $from->step;
    $thiz->trans_step = $from->trans_step;
    $thiz->comm       = array();

    /*
    $i_start = (1 > ($from->step - COMM_N) ? 1 : ($from->step - COMM_N)); 
    for ($i = $i_start ; $i < $from->step ; $i++) {
      log_wr("TRY PUSH:".$i);
      $ii = $i % COMM_N;
      $thiz->comm[$ii]   = $from->comm[$ii];
    }
    */
    $thiz->asta_card  = $from->asta_card;
    $thiz->asta_pnt   = $from->asta_pnt;
    $thiz->handpt     = $from->handpt;
    $thiz->exitislock = $from->exitislock;
    $thiz->the_end    = $from->the_end;

    $thiz->flags      = $from->flags;
    $thiz->rec        = $from->rec;

    $thiz->chattime   = array_fill(0, CHAT_N, 0);
    $thiz->chat_cur   = 0;
    $thiz->chat_lst   = "";
    $thiz->chat_ban   = 0;
    $thiz->chat_dlt   = 0;


    $thiz->table_orig = $table;
    $thiz->table      = 0;
    $thiz->table_pos  = $table_pos;
    $thiz->table_token = $from->table_token;
    $thiz->shm_sz      = $from->shm_sz;

    return ($thiz);
  }

  function flags_set($flags, $mask)
  {
      $flags_old = $this->flags & (~$mask);
      $this->flags = ($flags_old | ($flags & $mask));

      return ($flags_old);
  }

  function prefs_store()
  {
      if (($bdb = BriskDB::create()) == FALSE) {
          return FALSE;
      }
      return ($bdb->user_prefs_update($this->code, ($this->flags & (USER_FLAG_TY_ALL | USER_FLAG_MAP_AUTH)),
                                      $this->rec->supp_comp_get()));
  }

  function tos_store()
  {
      if (($bdb = BriskDB::create()) == FALSE) {
          return FALSE;
      }
      return ($bdb->user_tos_update($this->code, $this->rec->tos_vers_get()));
  }

  function state_store()
  {
   if (($bdb = BriskDB::create()) == FALSE) {
          return FALSE;
      }
      return ($bdb->user_state_update($this->code, ($this->flags & (USER_FLAG_TY_ALL | USER_FLAG_MAP_AUTH)),
                                      $this->rec->disa_reas_get()));
  }

  function rd_data_set($curtime, $transp, $enc, $stat, $subst, $step, $from)
  {
      $this->rd_endtime = $curtime + RD_ENDTIME_DELTA;
      $this->rd_stat    = $stat;
      $this->rd_subst   = $subst;
      $this->rd_step    = $step;
      $this->rd_from    = $from;
      $this->rd_scristp = 0;
      $this->rd_kalive  = $curtime + RD_KEEPALIVE_TOUT;
      $this->rd_zls     = ZLibStream::create($enc);
      $this->rd_transp  = Transport::create($transp);
      $this->rd_is_chunked = $this->rd_transp->is_chunked();
  }

  function rd_socket_get() {
      return ($this->rd_socket);
  }

  function rd_socket_set($sock) {
      if ($sock == NULL) {
          if ($this->rd_zls) {
              $this->rd_zls->destroy();
              $this->rd_zls = FALSE;
          }
      }
      $this->rd_socket = $sock;
  }

  function rd_kalive_get()
  {
      return ($this->rd_kalive);
  }

  function rd_kalive_set($tm)
  {
      $this->rd_kalive = $tm;
  }

  function rd_kalive_is_expired($tm)
  {
      // printf("rd_kalive %d tm %d\n", $this->rd_kalive, $tm);
      return ($this->rd_kalive < $tm);
  }

  function rd_endtime_is_expired($tm)
  {
      // printf("rd_endtime %d tm %d\n", $this->rd_kalive, $tm);
      return ($this->rd_endtime < $tm);
  }

  function rd_kalive_reset($tm)
  {
      $this->rd_kalive = $tm + RD_KEEPALIVE_TOUT;
  }

  function rd_cache_get()
  {
      return ($this->rd_cache);
  }

  function rd_cache_set($cache)
  {
      $this->rd_cache = $cache;
  }

  function rd_zls_get()
  {
      return ($this->rd_zls);
  }

  function idx_get() {
      return ($this->idx);
  }

  function code_get() {
      return ($this->code);
  }
  
  function stat_set($stat) {
    log_main("sess: [".$this->sess. "] NEW STAT: [".$stat."]"); 
    $this->stat = "$stat";
    
    /*
    if (validate_sess($this->sess)) {
      if (file_exists(PROXY_PATH) == FALSE)
        mkdir(PROXY_PATH, 0775, TRUE);
      $fp = @fopen(PROXY_PATH."/".$this->sess.".stat", 'w');
      fwrite($fp, sprintf("%s\n",$this->stat));
      fclose($fp);
    }
    */
  }

  function step_set($step) 
  {
      $this->step = $step & 0x7fffffff;
      
      return (TRUE);
  }

  function step_inc($delta = 1) {
      $this->step += $delta;
      /* modularization because unpack() not manage unsigned 32bit int correctly */
      $this->step &= 0x7fffffff;
      
      return TRUE;
  }


  function save_step() 
  {
      do {
          if (validate_sess($this->sess) == FALSE)
              break;
          if (file_exists(PROXY_PATH) == FALSE)
              mkdir(PROXY_PATH, 0775, TRUE);
          if (($fp = @fopen(PROXY_PATH."/".$this->sess.".step", 'w')) == FALSE)
              break;
          fwrite($fp, pack("LL",$this->step, $this->idx));
          fclose($fp);
          
          log_main("step_set [".$this->sess. "] [".$this->step."]"); 
          
          return (TRUE);
      } while (0);
      
      return (FALSE);
  }
  
  static function load_step($sess) 
  {
      $fp = FALSE;
      do {
          if (validate_sess($sess) == FALSE)
              break;
          
          if (file_exists(PROXY_PATH) == FALSE)
              mkdir(PROXY_PATH, 0775, TRUE);
          if (($fp = @fopen(PROXY_PATH."/".$sess.".step", 'rb')) == FALSE)
              break;
          if (($s = fread($fp, 8)) == FALSE)
              break;
          if (mb_strlen($s, "ASCII") != 8)
              break;
          $arr = unpack('Ls/Li', $s);
          fclose($fp);
          
          // log_rd2("A0: ".$arr[0]."  A1: ".$arr[1]);
          return ($arr);
      } while (0);
      
      if ($fp != FALSE)
          fclose($fp);
      
      log_rd2("STEP_GET [".$sess."]: return false ");
      
      return (FALSE);
  }

  static function unproxy_step($sess) {
      log_rd2("UNPROXY: ".PROXY_PATH."/".$sess.".step");
      if (file_exists(PROXY_PATH) == FALSE)
          return;
      @unlink(PROXY_PATH."/".$sess.".step");
  }

  function reset() {
    $curtime = time();
    log_legal($curtime, $this->ip, $this, "STAT:LOGOUT", '');

    $tmp_sess = $this->sess;
    $this->sess = "";
    self::unproxy_step($tmp_sess);
    $this->name = "";  // OK here
    while (array_pop($this->comm) != NULL);
    $this->step = 0;
    $this->chattime = array_fill(0, CHAT_N, 0);
    $this->chat_cur = 0;
    $this->chat_lst = "";
    $this->chat_ban = 0;
    $this->chat_dlt = 0;
    $this->the_end = FALSE;
  }

  function myname_innerHTML()
  {
      $class_id = ($this->flags & USER_FLAG_AUTH) + 1;
      
      return (sprintf('$("myname").innerHTML = "<span class=\"au%d\">%s</span>";', $class_id, 
                      xcape($this->name,ENT_COMPAT,"UTF-8")));
  }

  /* INDEX_RD PORT */

  static function blocking_error($is_unrecoverable)
  {
      log_crit("BLOCKING_ERROR UNREC: ".($is_unrecoverable ? "TRUE" : "FALSE"));
      return (sprintf(($is_unrecoverable ? 'xstm.stop(); ' : '').'window.onbeforeunload = null; window.onunload = null; document.location.assign("index.php");'));
  }
  
  // FIXME TO SUPPORT iframe
  protected function page_sync($sess, $page, $table_idx, $table_token)
  {
      // log_rd2("page_sync:".var_export(debug_backtrace()));
      
      log_rd2("PAGE_SYNC");
      printf("xXx USER::PAGE_SYNC [%s]\n", get_class($this));
      return (sprintf('createCookie("table_idx", %d, 24*365, cookiepath); createCookie("table_token", "%s", 24*365, cookiepath); xstm.stop(); window.onunload = null; window.onbeforeunload = null; document.location.assign("%s");', $table_idx, $table_token, $page));
  }

  protected function maincheck($get, $post, $cookie)
  {
      GLOBAL $G_lang, $G_base, $mlang_user;
      // GLOBAL $first_loop;
      GLOBAL $G_with_splash, $G_splash_content, $G_splash_interval, $G_splash_idx;
      GLOBAL $G_splash_w, $G_splash_h, $G_splash_timeout;
      GLOBAL $G_tos_vers, $G_tos_fname, $G_tos_dthard, $G_tos_dtsoft, $G_tos_idx;

      GLOBAL $S_load_stat;
      
      $CO_splashdate = "CO_splashdate".$G_splash_idx;

      if (($splashdate = gpcs_var("$CO_splashdate", $get, $post, $cookie)) === FALSE)
          $splashdate = "";

      log_rd("maincheck begin");
      
      $ret = FALSE;
      $curtime = time();
      
      /* Nothing changed, return. */
      if ($this->rd_step == $this->step)
          return (FALSE);
      
      log_rd2("do other cur_stat[".$this->rd_stat."] user->stat[".$this->stat."] cur_step[".$this->rd_step."] user_step[".$this->step."]");
      
      if ($this->rd_step == -1) {
          /*
           *  if $this->rd_step == -1 load the current state from the main struct
           */
          
          $S_load_stat['wR_minusone']++;
          
          // if ($this->the_end == TRUE) {
          // log_rd2("main_check: the end".var_export(debug_backtrace()));
          // }
          
          if ($this->trans_step != -1) {
              log_rd2("TRANS USATO ".$this->trans_step);
              $this->rd_step = $this->trans_step;
              $this->trans_step = -1;
          }
          else {
              log_rd2("TRANS NON ATTIVATO");
          }
      }
      
      
      /* this part I suppose is read only on $this->room structure */
      if ($this->rd_step == -1) {
          log_rd2("PRE-NEWSTAT: ".$this->stat);
          
          if ($this->stat == 'room') {
              log_rd("roomma ".$this->step);
              $curtime = time();
              if ($this->rec !== FALSE) {
                  if ($curtime > $G_tos_dtsoft || $curtime > $G_tos_dthard) {
                      if (versions_cmp($this->rec->tos_vers_get(), $G_tos_vers) < 0) { // comparison between user version and current version
                          if ($curtime > $G_tos_dtsoft) {
                              // call notify soft
                              $ret .=  show_notify_document(esclfhtml(file_get_contents($G_base.sprintf($G_tos_fname, $G_tos_vers, $G_lang))),
                                       0, array($mlang_user['btn_agree'][$G_lang], $mlang_user['btn_refuse'][$G_lang], $mlang_user['btn_after'][$G_lang] /* , "Scarico." */),
                                       "tos_confirm", 600, 600, TRUE, 0);
                              $ret .= sprintf("act_tosmgr('soft', g_nd.ret_get(), '%s', '%s');",
                                              xcape($this->rec->tos_vers_get()), xcape($G_tos_vers));
                          }
                          else if ($curtime > $G_tos_dthard) {
                              // call notify hard
                              $ret .=  show_notify_document(esclfhtml(file_get_contents($G_base.sprintf($G_tos_fname, $G_tos_vers, $G_lang))),
                                       0, array($mlang_user['btn_agree'][$G_lang], $mlang_user['btn_refuse'][$G_lang] /* , "Scarico." */),
                                       "tos_confirm", 600, 600, TRUE, 0);
                              $ret .= sprintf("act_tosmgr('hard', g_nd.ret_get(), '%s', '%s');",
                                              xcape($this->rec->tos_vers_get()), xcape($G_tos_vers));
                          }
                      }
                  }
              }
              if ($G_with_splash &&
                  ($splashdate < $curtime - $G_splash_interval ||
                   $splashdate > $curtime)) {
                  $is_super = $this->flags & USER_FLAG_TY_SUPER;
                  $ret .=  show_notify_ex(str_replace("\n", " ", $G_splash_content[$G_lang]),
                                          ($is_super ? 0 : $G_splash_timeout),
                                          // $mlang_user[($is_super ? 'btn_btotabsup' : 'btn_backtotab')][$G_lang],
                                          $mlang_user['btn_backtotab'][$G_lang],
                                          $G_splash_w, $G_splash_h, true,
                                          ($is_super ? 0 : $G_splash_timeout));
                  $ret .= sprintf('|createCookie("CO_splashdate%d", %d, 24*365, cookiepath);', $G_splash_idx, $curtime);
              }
              $ret .= $this->room->show_room($this->step, $this);
              
              // TODO uncomment and test
              /* NOTE the sets went common */
              $this->rd_stat =  $this->stat;
              $this->rd_subst = $this->subst;
              $this->rd_step =  $this->step;
          }
          /***************
           *             *
           *    TABLE    *
           *             *
           ***************/
          else if ($this->stat == 'table') {
              log_load("RESYNC");
              printf("xXx USER::MAINCHECK1 [%s]\n", get_class($this));

              return ($this->page_sync($this->sess, "briskin5/index.php", $this->table, $this->table_token));
          }
          log_rd2("NEWSTAT: ".$this->stat);
      } /* if ($this->rd_step == -1) { */
      else {
          /* $sem = Room::lock_data(FALSE); */
          $S_load_stat['rU_heavy']++;
          
          if ($this->rd_step < $this->step) {
              do {
                  if ($this->rd_step + COMM_N < $this->step) {
                      if (($this->rd_stat != $this->stat)) {
                          $to_stat = $this->stat;
                          /* Room::unlock_data($sem); */
                          log_load("RESYNC");
                          printf("xXx USER::MAINCHECK2 [%s]\n", get_class($this));
                          return ($this->page_sync($this->sess, ($to_stat == "table" ? "briskin5/index.php" : "index.php"), $this->table, $this->table_token));
                      }
                      log_rd2("lost history, refresh from scratch");
                      $this->rd_step = -1;
                      break;
                  } 
                  for ($i = $this->rd_step ; $i < $this->step ; $i++) {
                      $ii = $i % COMM_N;
                      log_rd2("ADDED TO THE STREAM: ".$this->comm[$ii]);
                      if ($this->comm[$ii] == "") {
                          if ($i == $this->rd_step)
                              continue;
                          else
                              break;
                      }
                      $ret .= $this->comm[$ii];
                  }
                  $this->rd_stat =  $this->stat;
                  $this->rd_subst = $this->subst;
                  $this->rd_step =  $this->step;
              } while (0);
              
              log_rd2($this->step, 'index_rd.php: after ret set');
              
              if ($this->the_end == TRUE) {
                  log_rd2("LOGOUT BYE BYE!!");
                  log_auth($this->sess, "Explicit logout.");
                  
                  if ($this->the_end == TRUE) {
                      $this->reset();
                      
                      if ($this->subst == 'sitdown') {
                          log_load("ROOM WAKEUP");
                          $this->room->room_wakeup($this);
                      }
                      else if ($this->subst == 'standup')
                          $this->room->room_outstandup($this);
                      else
                          log_rd2("LOGOUT FROM WHAT ???");
                      
                  } /* if ($this->the_end == TRUE) { ... */
              } /* if ($this->the_end == TRUE) { ... */
          } /* if ($this->rd_step < $this->step) { */
          
          /* Room::unlock_data($sem); */
      }  /* else of if ($this->rd_step == -1) { */
      
    
      return ($ret);
  }  //   function maincheck (...

  public static function stream_fini($transp, $init_string, $is_unrecoverable)
{
    printf("xXx user::stream_fini\n");

    // FIXME: dynamic "Transport_" type
    $trans_class = Transport::gettype($transp);
    $body = $trans_class::fini($init_string, self::base_get(), static::blocking_error($is_unrecoverable));

    // ELSE IF XHR THEN:
    // return (static::blocking_error($is_unrecoverable));
    return ($body);
}

/*
 *  MAIN
 */

/*
   FROM THE EXTERN 
   sess
   stat
   step
*/
function stream_init($init_string, $enc, $header, &$header_out, &$body, $get, $post, $cookie)
{
    $curtime = time();
    
    printf("CLASS: [%s] base: [%s]\n", get_class($this), self::base_get());

    log_load("index_rd_init.php");
    
    if (($from  = gpcs_var('from', $get, $post, $cookie)) === FALSE)
        $from = "";
    if (($stat  = gpcs_var('stat', $get, $post, $cookie)) === FALSE) 
        $stat = "";
    if (($subst = gpcs_var('subst', $get, $post, $cookie)) === FALSE) 
        $subst = "";
    if (($step  = gpcs_var('step', $get, $post, $cookie)) === FALSE) 
        unset($step);
    if (($transp  = gpcs_var('transp', $get, $post, $cookie)) === FALSE)
        $transp = "iframe";
    
    $this->rd_data_set($curtime, $transp, $enc, $stat, $subst, $step, $from);
    
    $ret = $this->rd_transp->init($enc, $header, &$header_out, $init_string, self::base_get(), $this->rd_scristp);

    if ($ret === FALSE) {
        return FALSE;
    }

    $body .= $ret;

    return TRUE;
  }

function stream_main(&$body, $get, $post, $cookie)
{
    log_rd2("FROM OUTSIDE - STAT: ".$this->rd_stat." SUBST: ".$this->rd_subst." STEP: ".$this->rd_step." FROM: ".$this->rd_from);
    
    
    $pre_main = gettimeofday(TRUE);
    
    $old_stat  = $this->rd_stat;
    $old_subst = $this->rd_subst;
    $old_step  = $this->rd_step;
    printf("xXx PRE : rd_step %d\n", $this->rd_step);
    if (($ret = $this->maincheck($old_stat, $old_subst, $old_step, $get, $post, $cookie)) != FALSE) {
        $body .= $this->rd_transp->chunk( $this->rd_scristp++, $ret);
        log_rd2(0, 'index_rd.php: after mop_flush (begin: '.sprintf("%f", $pre_main).')');
    }
    printf("xXx POST: rd_step %d\n", $this->rd_step);

    return TRUE;
}

function stream_keepalive($with_ping)
{
    return ($this->rd_transp->chunk( $this->rd_scristp++, ($with_ping ? "act_ping();" : NULL)));
}

function stream_close()
{
    return ($this->rd_transp->close());
}

static function base_get()
{
    $c = get_called_class();
    printf("CALLED_CLASS: [%s]\n", $c);
    return $c::BASE;
}

function is_supp_custom()
{
    if ($this->rec != FALSE) {
        if ($this->flags & USER_FLAG_TY_SUPER) {
            return (TRUE);
        }
        /*
          if ($this->rec->last_dona_get() > 1356994800) {
              return (TRUE);
          }
        */
    }
    return (FALSE);
}

function is_chunked()
{
    return $this->rd_is_chunked;
}


function chunked_content($content)
{
    if ($this->rd_zls) {
        $cont_comp = $this->rd_zls->compress_chunk($content);
    }
    else {
        $cont_comp = $content;
    }
    $cont_comp_l = mb_strlen($cont_comp, "ASCII");
    // printf("CHUNK: [%s]\n", $content);

    if ($this->is_chunked()) {
        return (sprintf("%X\r\n", $cont_comp_l).$cont_comp."\r\n");
    }
    else {
        return $cont_comp;
    }
}

function chunked_fini()
{
    return sprintf("0\r\n");
}


} // end class User


?>
