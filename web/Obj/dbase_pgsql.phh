<?php
  /*
   *  brisk - dbase_pgsql.phh
   *
   *  Copyright (C) 2006-2015 Matteo Nastasi
   *                          mailto: nastasi@alternativeoutput.it
   *                                  matteo.nastasi@milug.org
   *                          web: http://www.alternativeoutput.it
   *
   * This program is free software; you can redistribute it and/or modify
   * it under the terms of the GNU General Public License as published by
   * the Free Software Foundation; either version 2 of the License, or
   * (at your option) any later version.
   *
   * This program is distributed in the hope that it will be useful, but
   * WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABLILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   * General Public License for more details. You should have received a
   * copy of the GNU General Public License along with this program; if
   * not, write to the Free Software Foundation, Inc, 59 Temple Place -
   * Suite 330, Boston, MA 02111-1307, USA.
   *
   */

require_once("${G_base}Obj/dbase_base.phh");

$escsql_from = array( "\\",   "'"   );
$escsql_to   = array( "\\\\", "''" );

function escsql($s)
{
    GLOBAL $escsql_from, $escsql_to;

    return str_replace($escsql_from, $escsql_to, $s);
}

class DBConn
{
    static $dbcnnx = FALSE;
    var $db = FALSE;

    function DBConn()
    {
        $this->db = DBConn::$dbcnnx;
    }

    static function create()
    {
        GLOBAL $G_dbauth;

        if (DBConn::$dbcnnx == FALSE) {
            if (!(DBConn::$dbcnnx = @pg_connect ($G_dbauth, PGSQL_CONNECT_FORCE_NEW))) {
                return (FALSE);
            }
        }

        $out = new DBConn();

        return $out;
    }

    static function destroy()
    {
        if (DBConn::$dbcnnx != FALSE) {
            $ret = pg_close(DBConn::$dbcnnx);
            DBConn::$dbcnnx = FALSE;
            return ($ret);
        }
        return TRUE;
    }

    static function recover()
    {
        self::destroy();
        return (self::create());
    }

    function db()
    {
        return ($this->db);
    }
}

class BriskDB
{
    var $dbconn;
    var $item;
    var $item_n;

    function BriskDB($dbconn)
    {
        $this->dbconn = $dbconn;
    }

    static function create()
    {
        GLOBAL $DOCUMENT_ROOT, $G_dbpfx;

        $ret = FALSE;

        log_main("BriskDB create:start");

        do {
            if (($dbconn = DBConn::create()) == FALSE) {
                break;
            }

            $ret = new BriskDB($dbconn);
        } while (0);

        return ($ret);
    }

    function query($sql)
    {
        if (!$this->dbconn)
            if (($this->dbconn = DBConn::recover()) == FALSE)
                return FALSE;

        if (($res = @pg_query($this->dbconn->db(), $sql)) == FALSE) {
            error_log('pg_result_status: ' .  pg_result_status($res));
            error_log('pg_connection_status: ' .  pg_connection_status($this->dbconn->db()));
            // try to recover the connection
            if (($this->dbconn = DBConn::recover()) == FALSE)
                return FALSE;
            return (@pg_query($this->dbconn->db(), $sql));
        }

        return ($res);
    }

    function last_error()
    {
        return pg_last_error($this->dbconn->db);
    }

    function users_load()
    {
    }

    function login_exists($login)
    {
        GLOBAL $G_dbpfx;

        /* check the existence of the nick in the BriskDB */
        log_main("login_exists: ".$login);

        $user_sql = sprintf("SELECT * FROM %susers WHERE login = '%s'",
                            $G_dbpfx, escsql($login));
        if (($user_pg = $this->query($user_sql)) != FALSE)
            if (pg_numrows($user_pg) == 1)
                return TRUE;

        return FALSE;
    }

    function getrecord_bylogin($login) {
        GLOBAL $G_dbpfx;

        $user_sql = sprintf("SELECT * FROM %susers WHERE login = lower('%s') AND (type & CAST (X'%08x' as integer)) = 0;",  $G_dbpfx, escsql($login), USER_FLAG_TY_DISABLE);
        if (($user_pg  = $this->query($user_sql)) == FALSE) {
            return FALSE;
        }
        if (pg_numrows($user_pg) != 1)
            return FALSE;

        $user_obj = pg_fetch_object($user_pg, 0);

        return ($user_obj);
    }

    function user_add($login, $pass, $email, $type, $disa_reas, $guar_code) {
        GLOBAL $G_dbpfx;

        $usr_sql = sprintf("INSERT INTO %susers (login, pass, email, type, disa_reas, guar_code, lintm)
                            VALUES ('%s', '%s', '%s', %d, %d, %d, now()) RETURNING *;",
                           $G_dbpfx, escsql(strtolower($login)), escsql($pass), escsql($email),
                           $type, $disa_reas, $guar_code);

        if (! (($usr_pg  = $this->query($usr_sql)) != FALSE && pg_affected_rows($usr_pg) == 1) ) {
            return FALSE;
        }
        $usr_obj = pg_fetch_object($usr_pg, 0);

        return $usr_obj;
    }

    function transaction($cmd) {
        if ($cmd != "BEGIN" && $cmd != "COMMIT" && $cmd != "ROLLBACK")
            return FALSE;

        $trans_sql = sprintf("%s;", $cmd);
        if (($trans_pg  = $this->query($trans_sql)) == FALSE) {
            return FALSE;
        }

        return (TRUE);
    }

    /*
      $laddr is native php int (32 or 64 bit)
      if ret True is ip is free
    */
    function selfreg_check($laddr)
    {
        GLOBAL $G_dbpfx, $G_selfreg_tout, $G_selfreg_mask;

        $sere_sql = sprintf("DELETE from %sselfreg_chk WHERE atime < now();", $G_dbpfx);
        if (($sere_pg = $this->query($sere_sql)) == FALSE) {
            return (FALSE);
        }

        $sere_sql = sprintf("SELECT * FROM %sselfreg_chk WHERE (ip & %d) = %d;",
                            $G_dbpfx, int2four($G_selfreg_mask), int2four($laddr & $G_selfreg_mask));
        if (($sere_pg  = $this->query($sere_sql)) == FALSE) {
            return(FALSE);
        }

        $ret = pg_numrows($sere_pg);

        if ($ret === FALSE) {
            return(FALSE);
        }
        else if ($ret === 0) {
            return(TRUE);
        }
        else if ($ret > 0) {
            // already present
            return(FALSE);
        }
        else {
            // unreachable branch
            return(FALSE);
        }
    }

    /*
      $laddr is native php int (32 or 64 bit)
      if ret True is ip is free
    */
    function selfreg_set($laddr)
    {
        GLOBAL $G_dbpfx, $G_selfreg_tout, $G_selfreg_mask;

        $newi_sql = sprintf("INSERT INTO %sselfreg_chk (ip, atime) VALUES (%d, now() + interval '%d seconds');",
                            $G_dbpfx, int2four($laddr & $G_selfreg_mask), $G_selfreg_tout);
        if (($newi_pg  = $this->query($newi_sql)) == FALSE) {
            return(FALSE);
        }
        return(TRUE);
    }

    /*
      to be able to add mail record code into the record itself I must reserve it before.
     */
    function mail_reserve_code() {
        GLOBAL $G_dbpfx;

        $mail_sql = sprintf("SELECT nextval('%smails_code_seq'::regclass) AS nextval;", $G_dbpfx);
        if (($mail_pg  = $this->query($mail_sql)) == FALSE) {
            return FALSE;
        }
        if (pg_numrows($mail_pg) != 1)
            return FALSE;

        $mail_obj = pg_fetch_object($mail_pg, 0);

        return ($mail_obj->nextval);
    }

    function check_record_by_login_or_email($login, $email) {
        GLOBAL $G_dbpfx;

        $arr_fie = array('login', 'email');
        $arr_val = array($login, $email);

        for ($i = 0 ; $i < 2 ; $i++) {
            $user_sql = sprintf("SELECT * FROM %susers WHERE %s = lower('%s');",
                                $G_dbpfx, $arr_fie[$i], escsql($arr_val[$i]));
            if (($user_pg  = $this->query($user_sql)) == FALSE) {
                fprintf(STDERR, "QUERY [%s]_ FALSE", $user_sql);
                return (3);
            }
            if (pg_numrows($user_pg) == 1) {
                return ($i + 1);
            }
        }

        return (0);
    }

    function getrecord_bycode($code) {
        GLOBAL $G_dbpfx;

        $user_sql = sprintf("SELECT * FROM %susers WHERE code = %d;",  $G_dbpfx, $code);
        if (($user_pg  = $this->query($user_sql)) == FALSE) {
            return FALSE;
        }
        if (pg_numrows($user_pg) != 1)
            return FALSE;

        $user_obj = pg_fetch_object($user_pg, 0);

        return ($user_obj);
    }

    function user_update_login_time($code, $lintm)
    {
        GLOBAL $G_dbpfx;

        $user_sql = sprintf("UPDATE %susers SET (lintm) = (date 'epoch' + %d * INTERVAL '1 second') WHERE code = %d;", $G_dbpfx, $lintm, $code);

        if ( ! (($user_pg  = $this->query($user_sql)) != FALSE && pg_affected_rows($user_pg) == 1) ) {
             return FALSE;
        }

        return TRUE;
    }

    function user_update_flag_ty($code, $type, $old_val, $old_reas, $new_val, $new_reas)
    {
        GLOBAL $G_dbpfx;

        $user_sql = sprintf("UPDATE %susers SET (type, disa_reas)
            = (type & ~(CAST (X'%08x' as integer)) | (CAST (X'%08x' as integer)), %d)
            WHERE code = %d AND (type & (CAST (X'%08x' as integer)))
                = (CAST (X'%08x' as integer)) AND disa_reas = %d;",
                            $G_dbpfx, $type, ($new_val ? $type : 0), $new_reas,
                            $code, $type, ($old_val ? $type : 0), $old_reas);

        if ( ! (($user_pg  = $this->query($user_sql)) != FALSE && pg_affected_rows($user_pg) == 1) ) {
             return FALSE;
        }

        return TRUE;
    }

    function user_update_passwd($code, $passwd)
    {
        GLOBAL $G_dbpfx;

        $user_sql = sprintf("UPDATE %susers SET (pass) = (md5('%s')) WHERE code = %d;",
                            $G_dbpfx, $passwd, $code);

        if ( ! (($user_pg  = $this->query($user_sql)) != FALSE && pg_affected_rows($user_pg) == 1) ) {
             return FALSE;
        }

        return TRUE;
    }

    function user_prefs_update($code, $flags, $supp_comp)
    {
        GLOBAL $G_dbpfx;

        $user_sql = sprintf("UPDATE %susers SET (type, supp_comp) = (%d, '%s') WHERE code = %d;",
                            $G_dbpfx, $flags, escsql($supp_comp), $code);
        if ( ! (($user_pg  = $this->query($user_sql)) != FALSE && pg_affected_rows($user_pg) == 1) ) {
             return FALSE;
        }

        return TRUE;
    }

    function user_state_update($code, $flags, $disa_reas)
    {
        GLOBAL $G_dbpfx;

        $user_sql = sprintf("UPDATE %susers SET (type, disa_reas) = (%d, %d) WHERE code = %d;",
                            $G_dbpfx, $flags, $disa_reas, $code);
        if ( ! (($user_pg  = $this->query($user_sql)) != FALSE && pg_affected_rows($user_pg) == 1) ) {
             return FALSE;
        }

        return TRUE;
    }

    function user_tos_update($code, $tos_vers)
    {
        GLOBAL $G_dbpfx;

        $user_sql = sprintf("UPDATE %susers SET (tos_vers) = ('%s') WHERE code = %d;",
                            $G_dbpfx, escsql($tos_vers), $code);
        if ( ! (($user_pg  = $this->query($user_sql)) != FALSE && pg_affected_rows($user_pg) == 1) ) {
             return FALSE;
        }

        return TRUE;
    }

    /*
      if success return a LoginDBItem object
     */
    function login_verify($login, $pass)
    {
        GLOBAL $G_dbpfx;

        $ret = FALSE;

        log_main("login_verify: ".$login);

        //O /* check the existence of the nick in the BriskDB */
        //O for ($i = 0 ; $i < $this->item_n ; $i++) {
        //O log_main("login_verify: BEGIN");

        if (($user_obj = $this->getrecord_bylogin($login)) == FALSE) {
            return FALSE;
        }

        log_main("login[".$user_obj->code."]: ".$user_obj->login);

        /* if it exists check for a valid challenge */
        if (($a_sem = Challenges::lock_data(TRUE)) != FALSE) {
            if (($chals = &Challenges::load_data()) != FALSE) {
                for ($e = 0 ; $e < $chals->item_n ; $e++) {
                    log_main("challenge[".$e."]: ".$chals->item[$e]->login);
                    if (strcmp($login, $chals->item[$e]->login) == 0) {
                        log_main("login_verify [".$pass."] with [".md5($chals->item[$e]->token.$user_obj->pass)."]");

                        if (strcmp($pass, md5($chals->item[$e]->token.$user_obj->pass)) == 0) {
                            log_main("login_verify SUCCESS for ".$login);

                            $chals->rem($login);
                            $this->user_update_login_time($user_obj->code, time());
                            $ret = LoginDBItem::LoginDBItemFromRecord($user_obj);
                            break;
                        }
                    }
                } // end for ($e = 0 ...
            }

            if ($chals->ismod()) {
                Challenges::save_data(&$chals);
            }

            Challenges::unlock_data($a_sem);
        }
        //O break;
        // O } //  if (strcasecmp($this->item[$i]->login, ...
        //O }

        return ($ret);
    }

    function getitem_bylogin($login, &$id) {
        $ret = FALSE;
        $id = -1;

        log_main("getitem_bylogin: ".$login);

        if (($user_obj = $this->getrecord_bylogin($login)) == FALSE)
            return $ret;

        $id = $user_obj->code;
        return (LoginDBItem::LoginDBItemFromRecord($user_obj));
    }

    function getitem_bycode($code) {
        $ret = FALSE;

        log_main("getitem_bycode: ".$code);

        if (($user_obj = $this->getrecord_bycode($code)) == FALSE)
            return $ret;

        return (LoginDBItem::LoginDBItemFromRecord($user_obj));
    }

    // TODO FOR DB
    function getmail($login)
    {
        log_main("getmail");

        if (($ret = $this->getrecord_bylogin($login)) == FALSE)
            return FALSE;

        return ($ret->email);
    }

    function addusers_from_olddb($olddb, &$cont)
    {
        GLOBAL $G_dbpfx;

        for ($i = 0 ; $i < $olddb->count() ; $i++) {
            $user_sql = sprintf("INSERT INTO %susers ( login, pass, email, type) VALUES ('%s', '%s', '%s', %d);",
                                $G_dbpfx, escsql(strtolower($olddb->item[$i]->login)), escsql($olddb->item[$i]->pass),
                                escsql($olddb->item[$i]->email), $olddb->item[$i]->type & USER_FLAG_TY_ALL);

            if ( ! (($user_pg  = $this->query($user_sql)) != FALSE && pg_affected_rows($user_pg) == 1) ) {
                $cont .= sprintf("ERROR IN LINE: %s\n", eschtml($user_sql));

                return FALSE;
            }
        }
        return TRUE;
    }

    function getdbconn()
    {
        return ($this->dbconn);
    }

    // return array of array('code', 'login' [, 'first', 'last', 'tidx']) ordered by table position
    function users_get($match_code, $with_minmaxtidx, $is_newmatch)
    {
        GLOBAL $G_dbpfx;

        if ($is_newmatch) { // is new
            $usr_sql = sprintf("SELECT u.code AS code, u.login AS login%s
                                  FROM %sbin5_matches AS m, %sbin5_games AS g, %sbin5_points AS p,
                                       %susers AS u, %sbin5_table_orders AS o
                                  WHERE m.code = g.mcode AND g.code = p.gcode AND u.code = p.ucode
                                       AND m.code = o.mcode AND u.code = o.ucode AND m.code = %d
                                  GROUP BY u.code, u.login%s, o.pos
                                  ORDER BY o.pos;",
                               ($with_minmaxtidx ? ", min(g.tstamp) AS first, max(g.tstamp) AS last, m.tidx AS tidx" : ""),
                               $G_dbpfx, $G_dbpfx, $G_dbpfx, $G_dbpfx, $G_dbpfx, $match_code,
                               ($with_minmaxtidx ? ", m.tidx" : ""));
        }
        else { // is old
            $usr_sql = sprintf("SELECT u.code AS code, u.login AS login%s
                                  FROM %sbin5_matches AS m, %sbin5_games AS g, %sbin5_points AS p, %susers AS u
                                  WHERE m.code = g.mcode AND g.code = p.gcode AND u.code = p.ucode AND m.code = %d
                                  GROUP BY u.code, u.login%s;",
                               ($with_minmaxtidx ? ", min(g.tstamp) AS first, max(g.tstamp) AS last, m.tidx AS tidx" : ""),
                               $G_dbpfx, $G_dbpfx, $G_dbpfx, $G_dbpfx, $match_code,
                               ($with_minmaxtidx ? ", m.tidx" : ""));
        }

        if (($usr_pg  = pg_query($this->dbconn->db(), $usr_sql)) == FALSE ) {
            log_crit(sprintf("%s::%s: pg_query usr_sql failed [%s]", __CLASS__, __FUNCTION__, $usr_sql));
            return (FALSE);
        }
        $usr_n = pg_numrows($usr_pg);
        if ($usr_n != BIN5_PLAYERS_N) {
            log_crit(sprintf("%s::%s: wrong number of players [%s] %d", __CLASS__, __FUNCTION__, $usr_sql, $usr_n));
            return (FALSE);
        }
        $users = array();

        if ($with_minmaxtidx)
            $fields = array('code', 'login', 'first', 'last', 'tidx');
        else
            $fields = array('code', 'login');

        for ($u = 0 ; $u < $usr_n ; $u++) {
            $usr_obj = pg_fetch_object($usr_pg, $u);
            $users[$u] = array();
            foreach($fields as $field) {
                $users[$u][$field] = $usr_obj->$field;
            }
        }
        return ($users);
    }

    // out: tab->{points,points_n,old_reason}, in: tab->ttok
    function match_continue($match_code, $table, $tidx)
    {
        GLOBAL $G_dbpfx;
        $sql_ttok = escsql($table->table_token);

        if (($users = $this->users_get($match_code, FALSE /*without minmaxidx*/, TRUE /*new game*/)) == FALSE) {
            log_crit(sprintf("%s::%s: retrieve users fails", __CLASS__, __FUNCTION__));
            return (FALSE);
        }

        $num_sql = sprintf("SELECT count(*) AS points_n FROM %sbin5_games WHERE mcode = %d;", $G_dbpfx, $match_code);
        if (($num_pg  = $this->query($num_sql)) == FALSE || pg_numrows($num_pg) != 1) {
            log_crit(sprintf("%s::%s: get games number fails", __CLASS__, __FUNCTION__));
            return (FALSE);
        }
        $num_obj = pg_fetch_object($num_pg, 0);
        $table->points_n = $num_obj->points_n;

        // TAG: POINTS_MANAGEMENT
        $tot_sql = sprintf("SELECT sum(p.pts * (2^g.mult)) AS pts
                            FROM %sbin5_games AS g, %sbin5_points AS p, %susers AS u,
                                 %sbin5_table_orders AS o
                            WHERE g.mcode = %d AND g.code = p.gcode AND p.ucode = u.code
                                  AND p.ucode = o.ucode AND g.mcode = o.mcode
                            GROUP BY p.ucode, o.pos
                            ORDER BY o.pos;",
                           $G_dbpfx, $G_dbpfx, $G_dbpfx, $G_dbpfx, $match_code);
        if (($tot_pg  = pg_query($this->dbconn->db(), $tot_sql)) == FALSE
            || pg_numrows($tot_pg) != BIN5_PLAYERS_N) {
            log_crit(sprintf("%s::%s: get games totals fails", __CLASS__, __FUNCTION__));
            return(FALSE);
        }

        $u = 0;
        foreach ($users as $user) {
            // TAG: POINTS_MANAGEMENT
            $pts_sql = sprintf("SELECT p.pts AS pts, g.mult AS mult
                                    FROM %sbin5_points as p, %sbin5_games as g
                                    WHERE p.gcode = g.code AND g.mcode = %d AND p.ucode = %d
                                    ORDER BY g.tstamp ASC
                                    LIMIT %d OFFSET %d;",
                               $G_dbpfx, $G_dbpfx, $match_code, $user['code'],
                               MAX_POINTS,
                               ($num_obj->points_n < MAX_POINTS ? 0 : $num_obj->points_n - MAX_POINTS));

            // points of the match for each user
            if (($pts_pg  = $this->query($pts_sql)) == FALSE) {
                log_crit(sprintf("%s::%s: get points fails", __CLASS__, __FUNCTION__));
                return (FALSE);
            }
            $pts_n = pg_numrows($pts_pg);
            if ($pts_n > $table->points_n) {
                // inconsistent scenario number of points great than number of games
                log_crit(sprintf("%s::%s: number of points great than number of games", __CLASS__, __FUNCTION__));
                return (FALSE);
            }
            // TAG: POINTS_MANAGEMENT
            for ($i = 0 , $ct = $table->points_n - $pts_n; $ct < $table->points_n ; $ct++, $i++) {
                $pts_obj = pg_fetch_object($pts_pg, $i);
                $table->points[$ct % MAX_POINTS][$u] = $pts_obj->pts * pow(2, $pts_obj->mult);
            }
            $tot_obj = pg_fetch_object($tot_pg, $u);
            $table->total[$u] = $tot_obj->pts;

            $u++;
        }

        $gam_sql = sprintf("SELECT * FROM %sbin5_games WHERE mcode = %d ORDER BY tstamp DESC LIMIT 1;", $G_dbpfx, $match_code);
        if (($gam_pg  = $this->query($gam_sql)) == FALSE || pg_numrows($gam_pg) != 1) {
            log_crit(sprintf("%s::%s: get last game fails", __CLASS__, __FUNCTION__));
            return (FALSE);
        }
        $gam_obj = pg_fetch_object($gam_pg, 0);

        $table->old_reason = game_description($gam_obj->act, 'html', $gam_obj->mult,
                                              $gam_obj->asta_win, ($gam_obj->asta_win != -1 ?
                                                                   $users[$gam_obj->asta_win]['login'] : ""),
                                              $gam_obj->friend, ($gam_obj->friend != -1 ?
                                                                 $users[$gam_obj->friend]['login'] : ""),
                                              $gam_obj->pnt, $gam_obj->asta_pnt);

        // update matches with new ttok and table idx
        $mtc_sql = sprintf("UPDATE %sbin5_matches SET (ttok, tidx) = ('%s', %d) WHERE code = %d RETURNING *;",
                           $G_dbpfx, $sql_ttok, $tidx, $match_code);
        if (($mtc_pg  = $this->query($mtc_sql)) == FALSE || pg_numrows($mtc_pg) != 1) {
            log_crit(sprintf("%s::%s: update matches table failed", __CLASS__, __FUNCTION__));
            return (FALSE);
        }

        return (TRUE);
    }

    function match_order_get(&$match_data, $match_code, $exp_num)
    {
        GLOBAL $G_dbpfx;

        $ord_sql = sprintf("SELECT ucode FROM %sbin5_table_orders WHERE mcode = %d ORDER BY pos ASC;",
                           $G_dbpfx, $match_code);

        if (($ord_pg  = $this->query($ord_sql)) == FALSE || pg_numrows($ord_pg) != $exp_num) {
            log_crit(sprintf("%s: fails for id or users number", __FUNCTION__));
            return (FALSE);
        }

        $ucodes = array();
        for ($i = 0 ; $i < $exp_num ; $i++) {
            $ord_obj = pg_fetch_object($ord_pg, $i);
            $ucodes[$i] = $ord_obj->ucode;
        }

        if ($match_data !== NULL) {
            $mtdt_sql = sprintf("SELECT * FROM %sbin5_matches WHERE code = %d;",
                                $G_dbpfx, $match_code);

            if (($mtdt_pg  = $this->query($mtdt_sql)) == FALSE || pg_numrows($mtdt_pg) != 1) {
                log_crit(sprintf("%s: fails retrieve match_data values [%d]", __FUNCTION__, $match_code));
                return (FALSE);
            }

            $mtdt_obj = pg_fetch_object($mtdt_pg, 0);

            foreach (array('ttok', 'tidx', 'mult_next', 'mazzo_next', 'tcode') as $match_name) {
                $match_data[$match_name] = $mtdt_obj->$match_name;
            }
        }

        return ($ucodes);
    }

    //   ttok   text UNIQUE,
    //   tidx
    function bin5_points_save($date, $table, $tidx, $action, $ucodes, $pts)
    {
        GLOBAL $G_dbpfx;
        $sql_ttok = escsql($table->table_token);

        $is_trans = FALSE;
        $ret = FALSE;

        $n = count($ucodes);
        /* check the existence of the nick in the BriskDB */
        log_main("bin5_points_save: ");

        do {
            if ($this->query("BEGIN") == FALSE) {
                break;
            }
            $is_trans = TRUE;

            /*
             * matches management
             */
            $codes_where = "";
            $mtc_sql = sprintf("UPDATE %sbin5_matches SET (mazzo_next, mult_next) = (%d, %d) WHERE ttok = '%s' RETURNING *;",
                               $G_dbpfx, $table->mazzo, $table->mult, $sql_ttok);
            if (($mtc_pg  = $this->query($mtc_sql)) == FALSE || pg_numrows($mtc_pg) != 1) {

                // match not exists, insert it
                $mtc_sql = sprintf("INSERT INTO %sbin5_matches (ttok, tidx, mazzo_next, mult_next) VALUES ('%s', %d, %d, %d) RETURNING *;",
                                   $G_dbpfx, $sql_ttok, $tidx, $table->mazzo, $table->mult);
                if (($mtc_pg  = $this->query($mtc_sql)) == FALSE || pg_affected_rows($mtc_pg) != 1) {
                    log_crit(sprintf("bin5_points_save: failed at insert match [%s]", $mtc_sql));
                    break;
                }
                $mtc_obj = pg_fetch_object($mtc_pg, 0);

                for ($i = 0 ; $i < $n ; $i++) {
                    $ord_sql = sprintf("INSERT INTO %sbin5_table_orders (mcode, ucode, pos) VALUES (%d, %d, %d);",
                                       $G_dbpfx, $mtc_obj->code, $ucodes[$i], $i);
                    if (($ord_pg = $this->query($ord_sql)) == FALSE || pg_affected_rows($ord_pg) != 1 ) {
                        log_crit(sprintf("bin5_points_save: failed at insert table order [%s]", $ord_sql));
                        break;
                    }
                    $codes_where .= sprintf("%scode = %d", ($i == 0  ? "" : " OR "), $ucodes[$i]);
                }
                if ($i < $n)
                    break;

                $cnt_sql = sprintf("UPDATE %susers SET (match_cnt, game_cnt)
                                        = (match_cnt+1, game_cnt+1) WHERE %s;",
                                   $G_dbpfx, $codes_where);
                error_log($cnt_sql);
                if (($cnt_pg = $this->query($cnt_sql)) == FALSE || pg_affected_rows($cnt_pg) != $n) {
                    log_crit(sprintf("bin5_points_save: failed increment match and game [%s]", $cnt_sql));
                    break;
                }
            }
            else {
                $mtc_obj = pg_fetch_object($mtc_pg,0);

                for ($i = 0 ; $i < $n ; $i++) {
                    $codes_where .= sprintf("%scode = %d", ($i == 0 ? "" : " OR "), $ucodes[$i]);
                }
                $cnt_sql = sprintf("UPDATE %susers SET (game_cnt)
                                        = (game_cnt+1) WHERE %s;",
                                   $G_dbpfx, $codes_where);
                error_log($cnt_sql);
                if (($cnt_pg = $this->query($cnt_sql)) == FALSE || pg_affected_rows($cnt_pg) != $n) {
                    log_crit(sprintf("bin5_points_save: failed increment game [%s]", $cnt_sql));
                    break;
                }
            }

            /*
             * games management
             */
            $gam_sql = sprintf("INSERT INTO %sbin5_games (mcode, tstamp, act, asta_pnt, pnt, asta_win, friend, mazzo, mult)
                                               VALUES (%d, to_timestamp(%d), %d, %d, %d, %d, %d, %d, %d) RETURNING *;",
                               $G_dbpfx, $mtc_obj->code, $date, $action,
                               $table->old_asta_pnt, $table->old_pnt,
                               $table->old_asta_win,
                               $table->old_friend,
                               $table->old_mazzo, $table->old_mult);
            if (($gam_pg  = $this->query($gam_sql)) == FALSE || pg_affected_rows($gam_pg) != 1) {
                log_crit(sprintf("bin5_points_save: failed at insert game [%s]", $gam_sql));
                break;
            }

            $gam_obj = pg_fetch_object($gam_pg,0);

            /*
             * points management
             */
            for ($i = 0 ; $i < $n ; $i++) {
                /* put points */
                $pts_sql = sprintf("INSERT INTO %sbin5_points (gcode, ucode, pts)
                                               VALUES (%d, %d, %d);",
                                   $G_dbpfx, $gam_obj->code, $ucodes[$i], $pts[$i]);
                if (($pts_pg  = $this->query($pts_sql)) == FALSE || pg_affected_rows($pts_pg) != 1) {
                    log_crit(sprintf("bin5_points_save: failed at insert point [%s]", $pts_sql));
                    break;
                }
            }
            if ($i < $n)
                break;

            if ($this->query("COMMIT") == FALSE) {
                break;
            }

            $is_trans = FALSE;

            $table->match_id = $mtc_obj->code;
            $ret = TRUE;
        } while (0);

        if ($is_trans)
            $this->query("ROLLBACK");

        return $ret;
    }

    function mail_add_fromitem($mail) {
        GLOBAL $G_dbpfx;

        $usr_sql = sprintf("
INSERT INTO %smails (code, ucode, type, tstamp, subj, body_txt, body_htm, hash)
            VALUES (%d, %d, %d, to_timestamp(%d), '%s', '%s', '%s', '%s') RETURNING *;",
                           $G_dbpfx, $mail->code, $mail->ucode, $mail->type, $mail->tstamp,
                           escsql($mail->subj), escsql($mail->body_txt), escsql($mail->body_htm),
                           ($mail->hash == NULL ? "" : escsql($mail->hash))
                           );

        if (! (($usr_pg  = $this->query($usr_sql)) != FALSE && pg_affected_rows($usr_pg) == 1) ) {
            return FALSE;
        }
        $usr_obj = pg_fetch_object($usr_pg, 0);

        return $usr_obj;
    }

    function mail_check($code, $type, $hash)
    {
        GLOBAL $G_dbpfx;

        $mai_sql = sprintf("SELECT * FROM %smails WHERE code = %d AND type = %d AND hash = '%s';",
                           $G_dbpfx, $code, $type, escsql($hash));
        if (($mai_pg  = $this->query($mai_sql)) == FALSE || pg_numrows($mai_pg) != 1) {
            // check failed
            return (FALSE);
        }

        $mai_obj = pg_fetch_object($mai_pg, 0);
        return ($mai_obj);
    }

    function mail_delete($code)
    {
        GLOBAL $G_dbpfx;

        $mai_sql = sprintf("DELETE FROM %smails WHERE code = %d;", $G_dbpfx, $code);

        if (($mai_pg = $this->query($mai_sql)) == FALSE || pg_affected_rows($mai_pg) != 1) {
            return (FALSE);
        }
        return (TRUE);
    }

    function friendship_default()
    {
        return (array(usersnet_friend_getlabel(1) => "0",
                      usersnet_friend_getlabel(2) => "0",
                      usersnet_friend_getlabel(3) => "0",
                      usersnet_friend_getlabel(4) => "0",
                      usersnet_friend_getlabel(5) => "0"));
    }

    function usersnet_widefriend($owner, $target)
    {
        GLOBAL $G_dbpfx;

        $widefriend = $this->friendship_default();

        $wfri_sql = sprintf("SELECT * FROM %susersnet_widefriend WHERE owner = %d AND target = %d;",
                            $G_dbpfx, $owner, $target);
        if (($wfri_pg  = $this->query($wfri_sql)) == FALSE) {
            return ($widefriend);
        }

        for ($i = 0 ; $i < pg_numrows($wfri_pg) ; $i++) {
            $wfri_obj = pg_fetch_object($wfri_pg, $i);
            $widefriend[usersnet_friend_getlabel(intval($wfri_obj->friend))] = $wfri_obj->count;
        }

        return ($widefriend);
    }

    function usersnet_wideskill($owner, $target)
    {
        GLOBAL $G_dbpfx;

        $wideskill = "//";

        $wskl_sql = sprintf("SELECT * FROM %susersnet_wideskill WHERE owner = %d AND target = %d;",
                            $G_dbpfx, $owner, $target);
        if (($wskl_pg  = $this->query($wskl_sql)) == FALSE) {
            return ($wideskill);
        }

        if (pg_numrows($wskl_pg) > 0) {
            $wskl_obj = pg_fetch_object($wskl_pg, 0);
            // TODO: UNCOMMENT IF THE NETWORK WORKS VERY WELL
            // if ($wskl_obj->count >= 3)
            $wideskill = sprintf("%3.2f", $wskl_obj->skill);
        }
        return ($wideskill);
    }

    function usersnet_narrowfriend($owner, $target)
    {
        GLOBAL $G_dbpfx;

        $narrowfriend = $this->friendship_default();

        $nfri_sql = sprintf("SELECT * FROM %susersnet_narrowfriend WHERE owner = %d AND target = %d;",
                            $G_dbpfx, $owner, $target);
        if (($nfri_pg  = $this->query($nfri_sql)) == FALSE) {
            return $narrowfriend;
        }

        for ($i = 0 ; $i < pg_numrows($nfri_pg) ; $i++) {
            $nfri_obj = pg_fetch_object($nfri_pg, $i);
            $narrowfriend[usersnet_friend_getlabel(intval($nfri_obj->friend))] = $nfri_obj->count;
        }
        return ($narrowfriend);
    }

    function usersnet_narrowskill($owner, $target)
    {
        GLOBAL $G_dbpfx;

        $narrowskill = "//";

        $nskl_sql = sprintf("SELECT * FROM %susersnet_narrowskill WHERE owner = %d AND target = %d;",
                            $G_dbpfx, $owner, $target);
        if (($nskl_pg = $this->query($nskl_sql)) == FALSE) {
            return ($narrowskill);
        }

        if (pg_numrows($nskl_pg) > 0) {
            $nskl_obj = pg_fetch_object($nskl_pg, 0);
            // TODO: UNCOMMENT IF THE NETWORK WORKS VERY WELL
            // if ($nskl_obj->count >= 3)
            $narrowskill = sprintf("%3.2f", $nskl_obj->skill);
        }
        return ($narrowskill);
    }

    function usersnet_partyskill($owner, $target)
    {
        GLOBAL $G_dbpfx;

        $partyskill = "non disponibile";

        $pskl_sql = sprintf("SELECT * FROM %susersnet_party WHERE owner = %d AND target = %d;",
                            $G_dbpfx, $owner, $target);
        if (($pskl_pg  = $this->query($pskl_sql)) == FALSE) {
            return ($partyskill);
        }

        if (pg_numrows($pskl_pg) > 0) {
            $pskl_obj = pg_fetch_object($pskl_pg, 0);
            // TODO: UNCOMMENT IF THE NETWORK WORKS VERY WELL
            // if ($wskl_obj->count >= 3)
            $partyskill = sprintf("%3.2f", $pskl_obj->skill);
        }
        return ($partyskill);
    }

    function usersnet_bycode($owner, $target, $widefriend, $narrowfriend)
    {
        GLOBAL $G_dbpfx;
        $ret = FALSE;

        $net_sql = sprintf("SELECT * FROM %susersnet WHERE owner = %d AND target = %d;",
                           $G_dbpfx, $owner, $target);
        if (($net_pg  = $this->query($net_sql)) == FALSE)
            return FALSE;

        if (pg_numrows($net_pg) != 1)
            return FALSE;

        $net_obj = pg_fetch_object($net_pg, 0);

        return (UsersNetItem::UsersNetItemFromRecord($net_obj, $widefriend, $narrowfriend));
    }

    function usersnet_default($owner, $target, $widefriend, $narrowfriend)
    {
        return (UsersNetItem::UsersNetItemDefaults($owner, $target, $widefriend, $narrowfriend));
    }

    function usersnet_save($owner_id, $json)
    {
        GLOBAL $G_dbpfx;
        $ret = 99999;
        $trans = FALSE;

        do {
            $friend = usersnet_friend_getid($json->friend);

            $json->skill = intval($json->skill);
            $json->trust = intval($json->trust);

            if ($json->skill < 1 || $json->skill > 5 ||
                $json->trust < 1 || $json->trust > 5 ||
                $friend == FALSE) {
                $ret = 1;
                break;
            }
            $this->transaction('BEGIN');
            $trans = TRUE;

            if ($friend == USERSNET_FRIEND_UNKNOWN) {
               // try to update
                $net_sql = sprintf("
                    DELETE FROM %susersnet
                        USING %susers as us
                        WHERE owner = %d AND us.login = '%s' AND target = us.code;",
                                   $G_dbpfx, $G_dbpfx,
                                   $owner_id, escsql($json->login));

                if (($net_pg = $this->query($net_sql)) == FALSE) {
                    $ret = 5;
                    break;
                }
             }
            else { // if ($friend == USERSNET_FRIEND_UNKNOWN
                // try to update
                $net_sql = sprintf("
                    UPDATE %susersnet SET (friend, skill, trust, mtime) =
                        (%d, %d, %d, now())
                        FROM %susers as us
                        WHERE owner = %d AND us.login = '%s' AND target = us.code RETURNING *;",
                                   $G_dbpfx,
                                   $friend, $json->skill, $json->trust,
                                   $G_dbpfx,
                                   $owner_id, escsql($json->login));
                if (($net_pg  = $this->query($net_sql)) == FALSE || pg_numrows($net_pg) == 0) {
                    $net_sql = sprintf("
                INSERT INTO %susersnet SELECT %d AS owner, us.code as target,
                        %d as friend, %d as skill, %d as trust
                    FROM %susers as us WHERE us.login = '%s' RETURNING *;",
                                       $G_dbpfx, $owner_id,
                                       $friend, $json->skill, $json->trust,
                                       $G_dbpfx, $json->login);
                    if (($net_pg  = $this->query($net_sql)) == FALSE) {
                        log_wr('insert query failed');
                        $ret = 2;
                        break;
                    }
                    if (pg_numrows($net_pg) != 1) {
                        log_wr(sprintf('insert numrow failed [%s] [%d]', $net_sql, pg_numrows($net_pg)));
                        $ret = 3;
                        break;
                    }
                }
                else {
                    if (pg_numrows($net_pg) != 1) {
                        log_wr('update numrow failed');
                        $ret = 4;
                        break;
                    }
                }
            }
            $this->transaction('COMMIT');
            return (0);
        } while (0);

        if ($trans)
            $this->transaction('ROLLBACK');

        return ($ret);
    }
} // End class BriskDB

class LoginDBOld
{
    var $item;
    var $item_n;

    function LoginDBOld($filename)
    {
        GLOBAL $DOCUMENT_ROOT;
        log_main("LoginDBOld create:start");

        if (file_exists("$DOCUMENT_ROOT/Etc/".$filename)) {
            require("$DOCUMENT_ROOT/Etc/".$filename);
        }
        else {
            return (FALSE);
        }
        $this->item_n = count($this->item);
        log_main("LoginDBOld create:end");
    }

    function count()
    {
        return ($this->item_n);
    }

} // End class LoginDBOld

?>
